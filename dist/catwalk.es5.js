"use strict";
(function($window) {
  "use strict";
  var Catwalk = function Catwalk() {};
  ($traceurRuntime.createClass)(Catwalk, {createCollection: function(name, properties) {
      return new $window.Catwalk.Collection(name, properties);
    }}, {});
  $window.Catwalk = Catwalk;
})(window);

"use strict";
(function($Catwalk, $object) {
  "use strict";
  var CATWALK_PROPERTY = '__catwalkId';
  var CatwalkCollection = function CatwalkCollection(name, properties) {
    this.id = 0;
    this.name = name;
    this.properties = properties;
    this.models = [];
  };
  ($traceurRuntime.createClass)(CatwalkCollection, {
    addModel: function(properties) {
      var model = {};
      model[CATWALK_PROPERTY] = ++this.id;
      $object.keys(properties).forEach(function forEach(property) {
        model[property] = properties[property];
      });
      this.models.push($object.freeze(model));
      return model;
    },
    deleteModel: function(model) {
      var index = this.models.indexOf(model);
      this.models.splice(index, 1);
      return model;
    },
    clearModels: function() {
      this.models.length = 0;
    }
  }, {});
  $Catwalk.Collection = CatwalkCollection;
})(window.Catwalk, window.Object);

"use strict";

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNhdHdhbGsuanMiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvMSIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci8yIiwiQ29sbGVjdGlvbi5qcyIsIlJlbGF0aW9uc2hpcC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLEFBQUMsU0FBUyxPQUFNO0FBRVosYUFBVyxDQUFDO0FDRmhCLEFBQUksSUFBQSxVRFNBLFNBQU0sUUFBTSxDQU1HLEFBQUMsQ0FBRSxHQ2ZrQixBRGlCaEMsQ0NqQmdDO0FDQXhDLEVBQUMsZUFBYyxZQUFZLENBQUMsQUFBQyxXRnlCckIsZ0JBQWUsQ0FBZixVQUFpQixJQUFHLENBQUcsQ0FBQSxVQUFTLENBQUc7QUFDL0IsV0FBTyxJQUFJLENBQUEsT0FBTSxRQUFRLFdBQVcsQUFBQyxDQUFDLElBQUcsQ0FBRyxXQUFTLENBQUMsQ0FBQztJQUMzRCxNRTNCNkU7QUZnQ2pGLFFBQU0sUUFBUSxFQUFJLFFBQU0sQ0FBQztBQUU3QixDQUFDLEFBQUMsQ0FBQyxNQUFLLENBQUMsQ0FBQztBQUFBO0FHbENWO0FBQUEsQUFBQyxTQUFTLFFBQU8sQ0FBRyxDQUFBLE9BQU07QUFFdEIsYUFBVyxDQUFDO0lBTU4sQ0FBQSxnQkFBZSxFQUFJLGNBQVk7QUZSekMsQUFBSSxJQUFBLG9CRWVBLFNBQU0sa0JBQWdCLENBUU4sSUFBRyxDQUFHLENBQUEsVUFBUyxDQUFHO0FBQzFCLE9BQUcsR0FBRyxFQUFZLEVBQUEsQ0FBQztBQUNuQixPQUFHLEtBQUssRUFBVSxLQUFHLENBQUM7QUFDdEIsT0FBRyxXQUFXLEVBQUksV0FBUyxDQUFDO0FBQzVCLE9BQUcsT0FBTyxFQUFRLEdBQUMsQ0FBQztFRjNCUSxBRTZCaEMsQ0Y3QmdDO0FDQXhDLEVBQUMsZUFBYyxZQUFZLENBQUMsQUFBQztBQ29DcEIsV0FBTyxDQUFQLFVBQVMsVUFBUztRQUVYLENBQUEsS0FBSSxFQUFJLEdBQUM7QUFDYixVQUFJLENBQUUsZ0JBQWUsQ0FBQyxFQUFJLEdBQUUsSUFBRyxHQUFHLENBQUM7QUFFbkMsWUFBTSxLQUFLLEFBQUMsQ0FBQyxVQUFTLENBQUMsUUFBUSxBQUFDLENBQUMsUUFBUyxRQUFNLENBQUUsUUFBTyxDQUFHO0FBQ3hELFlBQUksQ0FBRSxRQUFPLENBQUMsRUFBSSxDQUFBLFVBQVMsQ0FBRSxRQUFPLENBQUMsQ0FBQztNQUMxQyxDQUFDLENBQUM7QUFHRixTQUFHLE9BQU8sS0FBSyxBQUFDLENBQUMsT0FBTSxPQUFPLEFBQUMsQ0FBQyxLQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3ZDLFdBQU8sTUFBSSxDQUFDO0lBRWhCO0FBT0EsY0FBVSxDQUFWLFVBQVksS0FBSTtRQUVSLENBQUEsS0FBSSxFQUFJLENBQUEsSUFBRyxPQUFPLFFBQVEsQUFBQyxDQUFDLEtBQUksQ0FBQztBQUNyQyxTQUFHLE9BQU8sT0FBTyxBQUFDLENBQUMsS0FBSSxDQUFHLEVBQUEsQ0FBQyxDQUFDO0FBQzVCLFdBQU8sTUFBSSxDQUFDO0lBRWhCO0FBTUEsY0FBVSxDQUFWLFVBQVcsQUFBQyxDQUFFO0FBQ1YsU0FBRyxPQUFPLE9BQU8sRUFBSSxFQUFBLENBQUM7SUFDMUI7QUFBQSxPRHRFNkU7QUMyRWpGLFNBQU8sV0FBVyxFQUFJLGtCQUFnQixDQUFDO0FBRTNDLENBQUMsQUFBQyxDQUFDLE1BQUssUUFBUSxDQUFHLENBQUEsTUFBSyxPQUFPLENBQUMsQ0FBQztBQUFBO0FDbERaO0FBQUQiLCJmaWxlIjoiY2F0d2Fsay5lczUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oJHdpbmRvdykge1xuXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICAvKipcbiAgICAgKiBAY2xhc3MgQ2F0d2Fsa1xuICAgICAqIEBhdXRob3IgQWRhbSBUaW1iZXJsYWtlXG4gICAgICogQGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL1dpbGRob25leS9DYXR3YWxrLmpzXG4gICAgICovXG4gICAgY2xhc3MgQ2F0d2FsayB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKiBAcmV0dXJuIHtDYXR3YWxrfVxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3RydWN0b3IoKSB7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWV0aG9kIGNyZWF0ZUNvbGxlY3Rpb25cbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IHByb3BlcnRpZXNcbiAgICAgICAgICogQHJldHVybiB7d2luZG93LkNhdHdhbGsuQ29sbGVjdGlvbn1cbiAgICAgICAgICovXG4gICAgICAgIGNyZWF0ZUNvbGxlY3Rpb24obmFtZSwgcHJvcGVydGllcykge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyAkd2luZG93LkNhdHdhbGsuQ29sbGVjdGlvbihuYW1lLCBwcm9wZXJ0aWVzKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgLy8gRXhwb3NlIHRoZSBgQ2F0d2Fsa2AgY2xhc3MuXG4gICAgJHdpbmRvdy5DYXR3YWxrID0gQ2F0d2FsaztcblxufSkod2luZG93KTsiLCJ2YXIgJF9fcGxhY2Vob2xkZXJfXzAgPSAkX19wbGFjZWhvbGRlcl9fMSIsIigkdHJhY2V1clJ1bnRpbWUuY3JlYXRlQ2xhc3MpKCRfX3BsYWNlaG9sZGVyX18wLCAkX19wbGFjZWhvbGRlcl9fMSwgJF9fcGxhY2Vob2xkZXJfXzIpIiwiKGZ1bmN0aW9uKCRDYXR3YWxrLCAkb2JqZWN0KSB7XG5cbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIC8qKlxuICAgICAqIEBjb25zdGFudCBDQVRXQUxLX1BST1BFUlRZXG4gICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgKi9cbiAgICBjb25zdCBDQVRXQUxLX1BST1BFUlRZID0gJ19fY2F0d2Fsa0lkJztcblxuICAgIC8qKlxuICAgICAqIEBjbGFzcyBDYXR3YWxrXG4gICAgICogQGF1dGhvciBBZGFtIFRpbWJlcmxha2VcbiAgICAgKiBAbGluayBodHRwczovL2dpdGh1Yi5jb20vV2lsZGhvbmV5L0NhdHdhbGsuanNcbiAgICAgKi9cbiAgICBjbGFzcyBDYXR3YWxrQ29sbGVjdGlvbiB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZXRob2QgY29uc3RydWN0b3JcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IHByb3BlcnRpZXNcbiAgICAgICAgICogQHJldHVybiB7Q2F0d2Fsa0NvbGxlY3Rpb259XG4gICAgICAgICAqL1xuICAgICAgICBjb25zdHJ1Y3RvcihuYW1lLCBwcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICB0aGlzLmlkICAgICAgICAgPSAwO1xuICAgICAgICAgICAgdGhpcy5uYW1lICAgICAgID0gbmFtZTtcbiAgICAgICAgICAgIHRoaXMucHJvcGVydGllcyA9IHByb3BlcnRpZXM7XG4gICAgICAgICAgICB0aGlzLm1vZGVscyAgICAgPSBbXTtcblxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZXRob2QgYWRkTW9kZWxcbiAgICAgICAgICogQHBhcmFtIHByb3BlcnRpZXMge09iamVjdH1cbiAgICAgICAgICogQHJldHVybiB7T2JqZWN0fVxuICAgICAgICAgKi9cbiAgICAgICAgIGFkZE1vZGVsKHByb3BlcnRpZXMpIHtcblxuICAgICAgICAgICAgbGV0IG1vZGVsID0ge307XG4gICAgICAgICAgICBtb2RlbFtDQVRXQUxLX1BST1BFUlRZXSA9ICsrdGhpcy5pZDtcblxuICAgICAgICAgICAgJG9iamVjdC5rZXlzKHByb3BlcnRpZXMpLmZvckVhY2goZnVuY3Rpb24gZm9yRWFjaChwcm9wZXJ0eSkge1xuICAgICAgICAgICAgICAgIG1vZGVsW3Byb3BlcnR5XSA9IHByb3BlcnRpZXNbcHJvcGVydHldO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIE1ha2UgdGhlIG1vZGVsIGltbXV0YWJsZSwgYW5kIHRoZW4gYWRkIGl0IHRvIHRoZSBhcnJheS5cbiAgICAgICAgICAgIHRoaXMubW9kZWxzLnB1c2goJG9iamVjdC5mcmVlemUobW9kZWwpKTtcbiAgICAgICAgICAgIHJldHVybiBtb2RlbDtcblxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZXRob2QgZGVsZXRlTW9kZWxcbiAgICAgICAgICogQHBhcmFtIG1vZGVsIHtPYmplY3R9XG4gICAgICAgICAqIEByZXR1cm4ge09iamVjdH1cbiAgICAgICAgICovXG4gICAgICAgIGRlbGV0ZU1vZGVsKG1vZGVsKSB7XG5cbiAgICAgICAgICAgIGxldCBpbmRleCA9IHRoaXMubW9kZWxzLmluZGV4T2YobW9kZWwpO1xuICAgICAgICAgICAgdGhpcy5tb2RlbHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIHJldHVybiBtb2RlbDtcblxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZXRob2QgY2xlYXJNb2RlbHNcbiAgICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAgICovXG4gICAgICAgIGNsZWFyTW9kZWxzKCkge1xuICAgICAgICAgICAgdGhpcy5tb2RlbHMubGVuZ3RoID0gMDtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgLy8gRXhwb3NlIHRoZSBgQ2F0d2Fsay5Db2xsZWN0aW9uYCBwcm9wZXJ0eS5cbiAgICAkQ2F0d2Fsay5Db2xsZWN0aW9uID0gQ2F0d2Fsa0NvbGxlY3Rpb247XG5cbn0pKHdpbmRvdy5DYXR3YWxrLCB3aW5kb3cuT2JqZWN0KTsiLCIvLyhmdW5jdGlvbigkQ2F0d2Fsaykge1xuLy9cbi8vICAgIFwidXNlIHN0cmljdFwiO1xuLy9cbi8vICAgIC8qKlxuLy8gICAgICogQGNsYXNzIENhdHdhbGtcbi8vICAgICAqIEBhdXRob3IgQWRhbSBUaW1iZXJsYWtlXG4vLyAgICAgKiBAbGluayBodHRwczovL2dpdGh1Yi5jb20vV2lsZGhvbmV5L0NhdHdhbGsuanNcbi8vICAgICAqL1xuLy8gICAgY2xhc3MgQ2F0d2Fsa0NvbGxlY3Rpb24ge1xuLy9cbi8vICAgICAgICAvKipcbi8vICAgICAgICAgKiBAbWV0aG9kIGNvbnN0cnVjdG9yXG4vLyAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbi8vICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvcGVydGllc1xuLy8gICAgICAgICAqIEByZXR1cm4ge0NhdHdhbGtDb2xsZWN0aW9ufVxuLy8gICAgICAgICAqL1xuLy8gICAgICAgIGNvbnN0cnVjdG9yKG5hbWUsIHByb3BlcnRpZXMpIHtcbi8vICAgICAgICAgICAgdGhpcy5fbmFtZSAgICAgICA9IG5hbWU7XG4vLyAgICAgICAgICAgIHRoaXMuX3Byb3BlcnRpZXMgPSBwcm9wZXJ0aWVzO1xuLy8gICAgICAgIH1cbi8vXG4vLyAgICB9XG4vL1xuLy8gICAgLy8gRXhwb3NlIHRoZSBgQ2F0d2Fsay5Db2xsZWN0aW9uYCBwcm9wZXJ0eS5cbi8vICAgICRDYXR3YWxrLkNvbGxlY3Rpb24gPSBDYXR3YWxrQ29sbGVjdGlvbjtcbi8vXG4vL30pKHdpbmRvdy5DYXR3YWxrKTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
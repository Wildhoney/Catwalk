"use strict";
(function($window) {
  "use strict";
  var Catwalk = function Catwalk() {
    this.typecast = new $window.Catwalk.Typecast();
  };
  ($traceurRuntime.createClass)(Catwalk, {createCollection: function(name, properties) {
      return new $window.Catwalk.Collection(name, properties);
    }}, {});
  $window.Catwalk = Catwalk;
})(window);

"use strict";
(function($Catwalk, $object) {
  "use strict";
  var CATWALK_PROPERTY = '__catwalkId';
  var CatwalkCollection = function CatwalkCollection(name, blueprint) {
    this.id = 0;
    this.name = name;
    this.models = [];
    this.blueprint = $object.freeze(blueprint);
  };
  ($traceurRuntime.createClass)(CatwalkCollection, {
    getModels: $traceurRuntime.initGeneratorFunction(function $__4() {
      var $__2,
          $__3,
          model;
      return $traceurRuntime.createGeneratorInstance(function($ctx) {
        while (true)
          switch ($ctx.state) {
            case 0:
              $__2 = this.models[Symbol.iterator]();
              $ctx.state = 14;
              break;
            case 14:
              $ctx.state = (!($__3 = $__2.next()).done) ? 9 : -2;
              break;
            case 9:
              $ctx.pushTry(7, null);
              $ctx.state = 10;
              break;
            case 10:
              throw undefined;
              $ctx.state = 12;
              break;
            case 12:
              $ctx.popTry();
              $ctx.state = 14;
              break;
            case 7:
              $ctx.popTry();
              model = $ctx.storedException;
              $ctx.state = 5;
              break;
            case 5:
              model = $__3.value;
              $ctx.state = 6;
              break;
            case 6:
              $ctx.state = 2;
              return model;
            case 2:
              $ctx.maybeThrow();
              $ctx.state = 14;
              break;
            default:
              return $ctx.end();
          }
      }, $__4, this);
    }),
    addModel: function() {
      var properties = arguments[0] !== (void 0) ? arguments[0] : {};
      var model = {};
      model = this.iterateProperties(properties);
      model = this.iterateBlueprint(model);
      model[CATWALK_PROPERTY] = ++this.id;
      this.models.push($object.freeze(model));
      return model;
    },
    iterateBlueprint: function(model) {
      var $__0 = this;
      $object.keys(this.blueprint).forEach((function(property) {
        if (typeof model[property] === 'undefined') {
          var propertyHandler = $__0.blueprint[property];
          model[property] = propertyHandler('');
        }
      }));
      return model;
    },
    iterateProperties: function(properties) {
      var $__0 = this;
      var model = {};
      $object.keys(properties).forEach((function(property) {
        var value = properties[property],
            propertyHandler = $__0.blueprint[property];
        if (typeof propertyHandler === 'undefined') {
          return;
        }
        if (typeof propertyHandler === 'function') {
          value = propertyHandler(value);
        }
        model[property] = value;
      }));
      return model;
    },
    deleteModel: function(model) {
      var index = this.models.indexOf(model);
      this.models.splice(index, 1);
      return model;
    },
    clearModels: function() {
      this.models.length = 0;
    }
  }, {});
  $Catwalk.Collection = CatwalkCollection;
})(window.Catwalk, window.Object);

"use strict";
(function($window, $Catwalk) {
  "use strict";
  var CatwalkTypecast = function CatwalkTypecast() {};
  ($traceurRuntime.createClass)(CatwalkTypecast, {string: function(value) {
      return (function(value) {
        return $window.String(value);
      });
    }}, {});
  $Catwalk.Typecast = CatwalkTypecast;
})(window, window.Catwalk);

//# sourceMappingURL=data:application/json;base64,
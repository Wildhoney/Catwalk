"use strict";
(function($window) {
  "use strict";
  var CATWALK_META_PROPERTY = '__catwalk';
  var CATWALK_STATES_PROPERTIES = {
    NEW: 1,
    DIRTY: 2,
    SAVED: 4,
    DELETED: 8
  };
  var Catwalk = function Catwalk() {
    this.events = {};
    this.collections = {};
    this.relationship = new Relationship();
    this.typecast = new Typecast();
  };
  ($traceurRuntime.createClass)(Catwalk, {
    createCollection: function(name, properties) {
      var collection = new Collection(name, properties);
      this.collections[name] = collection;
      return collection;
    },
    collection: function(name) {
      if (typeof this.collections[name] === 'undefined') {
        this.throwException(("Unable to find collection \"" + name + "\""));
      }
      return this.collections[name];
    },
    throwException: function(message) {
      throw ("Catwalk: " + message + ".");
    },
    on: function(name, eventFn) {
      this.events[name] = eventFn;
    },
    off: function(name) {
      delete this.events[name];
    }
  }, {});
  var Collection = function Collection(name, properties) {
    this.id = 0;
    this.name = name;
    this.models = [];
    this.silent = false;
    this.blueprint = new BlueprintModel(name, properties);
  };
  ($traceurRuntime.createClass)(Collection, {
    silently: function(silentFn) {
      this.silent = true;
      silentFn.apply(this);
      this.silent = false;
    },
    createModel: function() {
      var properties = arguments[0] !== (void 0) ? arguments[0] : {};
      var model = this.blueprint.iterateAll(properties);
      this.injectMeta(model);
      Object.seal(model);
      this.models.push(model);
      this.issuePromise('create', model, null);
      return model;
    },
    readModel: function(properties) {
      this.issuePromise('read', properties, null);
      return properties;
    },
    updateModel: function(model, properties) {
      var previousModel = {};
      Object.keys(model).forEach((function(property) {
        return previousModel[property] = model[property];
      }));
      try {
        Object.keys(properties).forEach((function(property) {
          return model[property] = properties[property];
        }));
      } catch (e) {}
      this.issuePromise('update', model, previousModel);
      return model;
    },
    deleteModel: function(model) {
      var $__0 = this;
      var remove = (function(model, index) {
        $__0.issuePromise('delete', null, model);
        $__0.models.splice(index, 1);
      });
      var didDeleteViaReference = false;
      ((function() {
        var index = $__0.models.indexOf(model);
        if (index !== -1) {
          didDeleteViaReference = true;
          remove($__0.models[index], index);
        }
      }))();
      ((function() {
        if (didDeleteViaReference) {
          return;
        }
        var index = 0;
        $__0.models.forEach((function(currentModel) {
          if (currentModel[CATWALK_META_PROPERTY].id === model[CATWALK_META_PROPERTY].id) {
            remove(currentModel, index);
          }
          index++;
        }));
      }))();
      return model;
    },
    injectMeta: function(model) {
      model[CATWALK_META_PROPERTY] = {
        id: ++this.id,
        status: CATWALK_STATES_PROPERTIES.NEW
      };
    },
    issuePromise: function(eventName, currentModel, previousModel) {
      var $__0 = this;
      if (this.silent) {
        return;
      }
      if (typeof catwalk.events[eventName] !== 'function') {
        return;
      }
      new Promise((function(resolve, reject) {
        catwalk.events[eventName]($__0.name, $__0.cleanModel(currentModel || previousModel), {
          resolve: resolve,
          reject: reject
        });
      })).then((function(resolutionParams) {
        $__0.resolvePromise(eventName, currentModel, previousModel)(resolutionParams);
      }), (function(resolutionParams) {
        $__0.rejectPromise(eventName, currentModel, previousModel)(resolutionParams);
      }));
    },
    resolvePromise: function(eventName, currentModel, previousModel) {
      var $__0 = this;
      if (currentModel && eventName === 'create') {
        currentModel[CATWALK_META_PROPERTY].status = CATWALK_STATES_PROPERTIES.SAVED;
      }
      if ((currentModel === null && previousModel) && eventName === 'delete') {
        previousModel[CATWALK_META_PROPERTY].status = CATWALK_STATES_PROPERTIES.DELETED;
      }
      return (function(properties) {
        $__0.silently((function() {
          if (properties && eventName !== 'read') {
            $__0.updateModel(currentModel, properties);
          }
          if (properties && !properties.hasOwnProperty(CATWALK_META_PROPERTY) && eventName === 'read') {
            var model = $__0.createModel(properties);
            $__0.updateModel(currentModel, model);
          }
        }));
        $__0.conditionallyEmitEvent();
      });
    },
    rejectPromise: function(eventName, currentModel, previousModel) {
      var $__0 = this;
      var rejectWith = (function(duplicateModel) {
        if (duplicateModel) {
          $__0.silently((function() {
            if (eventName === 'update' && duplicateModel.hasOwnProperty(CATWALK_META_PROPERTY)) {
              $__0.deleteModel(previousModel);
              previousModel[CATWALK_META_PROPERTY].status = CATWALK_STATES_PROPERTIES.DELETED;
            }
            $__0.updateModel(currentModel, duplicateModel);
            currentModel[CATWALK_META_PROPERTY].status = CATWALK_STATES_PROPERTIES.SAVED;
          }));
        }
        $__0.conditionallyEmitEvent();
      });
      if (previousModel === null && eventName === 'create') {
        this.silently((function() {
          $__0.deleteModel(currentModel);
          currentModel[CATWALK_META_PROPERTY].status = CATWALK_STATES_PROPERTIES.DELETED;
        }));
        return rejectWith;
      }
      if (currentModel === null && eventName === 'delete') {
        this.silently((function() {
          var model = $__0.updateModel({}, previousModel);
          $__0.models.push(model);
        }));
      }
      if ((currentModel && previousModel) && eventName === 'update') {
        this.silently((function() {
          $__0.updateModel(currentModel, previousModel);
        }));
      }
      return rejectWith;
    },
    conditionallyEmitEvent: function() {
      if (typeof catwalk.events.refresh === 'function') {
        catwalk.events.refresh();
      }
    },
    cleanModel: function(model) {
      var cleanedModel = {};
      Object.keys(model).forEach((function(property) {
        if (property === CATWALK_META_PROPERTY) {
          return;
        }
        cleanedModel[property] = model[property];
      }));
      return cleanedModel;
    }
  }, {});
  var BlueprintModel = function BlueprintModel(name, blueprint) {
    this.name = name;
    this.model = Object.freeze(blueprint);
  };
  ($traceurRuntime.createClass)(BlueprintModel, {
    iterateAll: function(properties) {
      var model = this.iterateProperties(properties);
      return this.iterateBlueprint(model);
    },
    iterateProperties: function(properties) {
      var $__0 = this;
      var model = {};
      Object.keys(properties).forEach((function(property) {
        var value = properties[property],
            propertyHandler = $__0.model[property];
        if (typeof propertyHandler === 'undefined') {
          return;
        }
        if (propertyHandler instanceof RelationshipAbstract) {
          Object.defineProperty(model, property, propertyHandler.defineRelationship($__0.name, property));
          propertyHandler.setValues(properties[property]);
        }
        if (typeof propertyHandler === 'function') {
          value = propertyHandler(value);
        }
        model[property] = value;
      }));
      return model;
    },
    iterateBlueprint: function(model) {
      var $__0 = this;
      Object.keys(this.model).forEach((function(property) {
        if (typeof model[property] === 'undefined') {
          model[property] = $__0.model[property];
          if (typeof $__0.model[property] === 'function') {
            try {
              throw undefined;
            } catch (propertyHandler) {
              {
                propertyHandler = $__0.model[property];
                model[property] = propertyHandler();
              }
            }
          }
        }
      }));
      return model;
    }
  }, {});
  var Typecast = function Typecast() {};
  ($traceurRuntime.createClass)(Typecast, {
    returnValue: function(typecastConstructor, value, defaultValue) {
      return typecastConstructor(typeof value !== 'undefined' ? value : defaultValue);
    },
    string: function() {
      var defaultValue = arguments[0] !== (void 0) ? arguments[0] : '';
      var $__0 = this;
      return (function(value) {
        return $__0.returnValue(String, value, defaultValue);
      });
    },
    boolean: function() {
      var defaultValue = arguments[0] !== (void 0) ? arguments[0] : true;
      var $__0 = this;
      return (function(value) {
        return $__0.returnValue(Boolean, value, defaultValue);
      });
    },
    number: function() {
      var defaultValue = arguments[0] !== (void 0) ? arguments[0] : 0;
      var $__0 = this;
      return (function(value) {
        return $__0.returnValue(Number, value, defaultValue);
      });
    }
  }, {});
  var Relationship = function Relationship() {};
  ($traceurRuntime.createClass)(Relationship, {
    hasOne: function(foreignKey, collectionName) {
      return new RelationshipHasOne(foreignKey, collectionName);
    },
    hasMany: function(foreignKey, collectionName) {
      return new RelationshipHasMany(foreignKey, collectionName);
    }
  }, {});
  var RelationshipAbstract = function RelationshipAbstract(foreignKey, collectionName) {
    this.target = {
      collection: collectionName,
      key: foreignKey
    };
  };
  ($traceurRuntime.createClass)(RelationshipAbstract, {
    setValues: function(values) {
      this.values = this.value = values;
    },
    defineRelationship: function(collectionName, localKey, accessorFunctions) {
      this.source = {
        collection: collectionName,
        key: localKey
      };
      return {
        get: accessorFunctions.get,
        set: accessorFunctions.set
      };
    }
  }, {});
  var RelationshipHasMany = function RelationshipHasMany() {
    $traceurRuntime.defaultSuperCall(this, $RelationshipHasMany.prototype, arguments);
  };
  var $RelationshipHasMany = RelationshipHasMany;
  ($traceurRuntime.createClass)(RelationshipHasMany, {
    defineRelationship: function(collectionName, localKey) {
      return $traceurRuntime.superCall(this, $RelationshipHasMany.prototype, "defineRelationship", [collectionName, localKey, {
        get: this.getModels.bind(this),
        set: this.setModels.bind(this)
      }]);
    },
    getModels: function() {
      var $__0 = this;
      var loadModels = (function() {
        return foreignCollection.models.filter((function(foreignModel) {
          return $__0.values.indexOf(foreignModel[$__0.target.key]) !== -1;
        }));
      });
      var arrayDiff = (function(firstArray, secondArray) {
        return firstArray.filter(function(i) {
          return secondArray.indexOf(i) < 0;
        });
      });
      var foreignCollection = catwalk.collection(this.target.collection),
          models = loadModels();
      if (models.length !== this.values.length) {
        var loadedKeys = models.map((function(model) {
          return model[$__0.target.key];
        })),
            requiredKeys = arrayDiff(this.values, loadedKeys);
        requiredKeys.forEach((function(foreignKey) {
          var requiredModel = {};
          requiredModel[$__0.target.key] = foreignKey;
          foreignCollection.readModel(requiredModel);
        }));
        models = loadModels();
      }
      return models;
    },
    setModels: function(values) {
      this.values = values;
    }
  }, {}, RelationshipAbstract);
  var RelationshipHasOne = function RelationshipHasOne() {
    $traceurRuntime.defaultSuperCall(this, $RelationshipHasOne.prototype, arguments);
  };
  var $RelationshipHasOne = RelationshipHasOne;
  ($traceurRuntime.createClass)(RelationshipHasOne, {
    defineRelationship: function(collectionName, localKey) {
      return $traceurRuntime.superCall(this, $RelationshipHasOne.prototype, "defineRelationship", [collectionName, localKey, {
        get: this.getModel.bind(this),
        set: this.setModel.bind(this)
      }]);
    },
    getModel: function() {
      var $__0 = this;
      var loadModel = (function() {
        return foreignCollection.models.find((function(foreignModel) {
          return $__0.value === foreignModel[$__0.target.key];
        }));
      });
      var foreignCollection = catwalk.collection(this.target.collection),
          model = loadModel();
      if (!model) {
        var requiredModel = {};
        requiredModel[this.target.key] = this.value;
        foreignCollection.readModel(requiredModel);
        model = loadModel();
      }
      return model;
    },
    setModel: function(value) {
      this.value = value;
    }
  }, {}, RelationshipAbstract);
  $window.catwalk = new Catwalk();
})(window);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNhdHdhbGsuanMiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvMSIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci8yIiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzQiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvNiIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci81IiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxBQUFDLFNBQVMsT0FBTTtBQUVaLGFBQVcsQ0FBQztJQU1OLENBQUEscUJBQW9CLEVBQUksWUFBVTtJQU1sQyxDQUFBLHlCQUF3QixFQUFJO0FBQUUsTUFBRSxDQUFHLEVBQUE7QUFBRyxRQUFJLENBQUcsRUFBQTtBQUFHLFFBQUksQ0FBRyxFQUFBO0FBQUcsVUFBTSxDQUFHLEVBQUE7QUFBQSxFQUFFO0FDZC9FLEFBQUksSUFBQSxVRG1CQSxTQUFNLFFBQU0sQ0FNRyxBQUFDLENBQUU7QUFDVixPQUFHLE9BQU8sRUFBVSxHQUFDLENBQUM7QUFDdEIsT0FBRyxZQUFZLEVBQUssR0FBQyxDQUFDO0FBQ3RCLE9BQUcsYUFBYSxFQUFJLElBQUksYUFBVyxBQUFDLEVBQUMsQ0FBQztBQUN0QyxPQUFHLFNBQVMsRUFBUSxJQUFJLFNBQU8sQUFBQyxFQUFDLENBQUM7RUM3Qk4sQUQ4QmhDLENDOUJnQztBQ0F4QyxFQUFDLGVBQWMsWUFBWSxDQUFDLEFBQUM7QUZvQ3JCLG1CQUFlLENBQWYsVUFBaUIsSUFBRyxDQUFHLENBQUEsVUFBUyxDQUFHO0FBRS9CLEFBQUksUUFBQSxDQUFBLFVBQVMsRUFBSSxJQUFJLFdBQVMsQUFBQyxDQUFDLElBQUcsQ0FBRyxXQUFTLENBQUMsQ0FBQztBQUNqRCxTQUFHLFlBQVksQ0FBRSxJQUFHLENBQUMsRUFBSSxXQUFTLENBQUM7QUFDbkMsV0FB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SSxNQUFJLENBQUM7SUFDdEI7QUFBQSxPQTFENkIscUJBQW1CLENLcHlCQTtBTG0yQnBELFFBQU0sUUFBUSxFQUFJLElBQUksUUFBTSxBQUFDLEVBQUMsQ0FBQztBQUVuQyxDQUFDLEFBQUMsQ0FBQyxNQUFLLENBQUMsQ0FBQztBQUFBIiwiZmlsZSI6ImNhdHdhbGsuZXM1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCR3aW5kb3cpIHtcblxuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgLyoqXG4gICAgICogQGNvbnN0YW50IENBVFdBTEtfTUVUQV9QUk9QRVJUWVxuICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICovXG4gICAgY29uc3QgQ0FUV0FMS19NRVRBX1BST1BFUlRZID0gJ19fY2F0d2Fsayc7XG5cbiAgICAvKipcbiAgICAgKiBAY29uc3RhbnQgQ0FUV0FMS19TVEFURV9QUk9QRVJUSUVTXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cbiAgICBjb25zdCBDQVRXQUxLX1NUQVRFU19QUk9QRVJUSUVTID0geyBORVc6IDEsIERJUlRZOiAyLCBTQVZFRDogNCwgREVMRVRFRDogOCB9O1xuXG4gICAgLyoqXG4gICAgICogQGNsYXNzIENhdHdhbGtcbiAgICAgKi9cbiAgICBjbGFzcyBDYXR3YWxrIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqIEByZXR1cm4ge0NhdHdhbGt9XG4gICAgICAgICAqL1xuICAgICAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzICAgICAgID0ge307XG4gICAgICAgICAgICB0aGlzLmNvbGxlY3Rpb25zICA9IHt9O1xuICAgICAgICAgICAgdGhpcy5yZWxhdGlvbnNoaXAgPSBuZXcgUmVsYXRpb25zaGlwKCk7XG4gICAgICAgICAgICB0aGlzLnR5cGVjYXN0ICAgICA9IG5ldyBUeXBlY2FzdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZXRob2QgY3JlYXRlQ29sbGVjdGlvblxuICAgICAgICAgKiBAcmV0dXJuIHtDb2xsZWN0aW9ufVxuICAgICAgICAgKi9cbiAgICAgICAgY3JlYXRlQ29sbGVjdGlvbihuYW1lLCBwcm9wZXJ0aWVzKSB7XG5cbiAgICAgICAgICAgIHZhciBjb2xsZWN0aW9uID0gbmV3IENvbGxlY3Rpb24obmFtZSwgcHJvcGVydGllcyk7XG4gICAgICAgICAgICB0aGlzLmNvbGxlY3Rpb25zW25hbWVdID0gY29sbGVjdGlvbjtcbiAgICAgICAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xuXG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQG1ldGhvZCBjb2xsZWN0aW9uXG4gICAgICAgICAqIEBwYXJhbSBuYW1lIHtTdHJpbmd9XG4gICAgICAgICAqIEByZXR1cm4ge0NvbGxlY3Rpb259XG4gICAgICAgICAqL1xuICAgICAgICBjb2xsZWN0aW9uKG5hbWUpIHtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmNvbGxlY3Rpb25zW25hbWVdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHRoaXMudGhyb3dFeGNlcHRpb24oYFVuYWJsZSB0byBmaW5kIGNvbGxlY3Rpb24gXCIke25hbWV9XCJgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29sbGVjdGlvbnNbbmFtZV07XG5cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWV0aG9kIHRocm93RXhjZXB0aW9uXG4gICAgICAgICAqIEB0aHJvd3MgRXhjZXB0aW9uXG4gICAgICAgICAqIEBwYXJhbSBtZXNzYWdlIHtTdHJpbmd9XG4gICAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgICAqL1xuICAgICAgICB0aHJvd0V4Y2VwdGlvbihtZXNzYWdlKSB7XG4gICAgICAgICAgICB0aHJvdyBgQ2F0d2FsazogJHttZXNzYWdlfS5gO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZXRob2Qgb25cbiAgICAgICAgICogQHBhcmFtIG5hbWUge1N0cmluZ31cbiAgICAgICAgICogQHBhcmFtIGV2ZW50Rm4ge0Z1bmN0aW9ufVxuICAgICAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAgICAgKi9cbiAgICAgICAgb24obmFtZSwgZXZlbnRGbikge1xuICAgICAgICAgICAgdGhpcy5ldmVudHNbbmFtZV0gPSBldmVudEZuO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZXRob2Qgb2ZmXG4gICAgICAgICAqIEBwYXJhbSBuYW1lIHtTdHJpbmd9XG4gICAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgICAqL1xuICAgICAgICBvZmYobmFtZSkge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuZXZlbnRzW25hbWVdO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAY2xhc3MgQ29sbGVjdGlvblxuICAgICAqL1xuICAgIGNsYXNzIENvbGxlY3Rpb24ge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICAgICogQHBhcmFtIG5hbWUge1N0cmluZ31cbiAgICAgICAgICogQHBhcmFtIHByb3BlcnRpZXMge09iamVjdH1cbiAgICAgICAgICogQHJldHVybiB7Q29sbGVjdGlvbn1cbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0cnVjdG9yKG5hbWUsIHByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgIHRoaXMuaWQgICAgICAgID0gMDtcbiAgICAgICAgICAgIHRoaXMubmFtZSAgICAgID0gbmFtZTtcbiAgICAgICAgICAgIHRoaXMubW9kZWxzICAgID0gW107XG4gICAgICAgICAgICB0aGlzLnNpbGVudCAgICA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5ibHVlcHJpbnQgPSBuZXcgQmx1ZXByaW50TW9kZWwobmFtZSwgcHJvcGVydGllcyk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQG1ldGhvZCBzaWxlbnRseVxuICAgICAgICAgKiBAcGFyYW0gc2lsZW50Rm4ge0Z1bmN0aW9ufVxuICAgICAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAgICAgKi9cbiAgICAgICAgc2lsZW50bHkoc2lsZW50Rm4pIHtcbiAgICAgICAgICAgIHRoaXMuc2lsZW50ID0gdHJ1ZTtcbiAgICAgICAgICAgIHNpbGVudEZuLmFwcGx5KHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5zaWxlbnQgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWV0aG9kIGNyZWF0ZU1vZGVsXG4gICAgICAgICAqIEBwYXJhbSBbcHJvcGVydGllcz17fV0ge09iamVjdH1cbiAgICAgICAgICogQHJldHVybiB7T2JqZWN0fVxuICAgICAgICAgKi9cbiAgICAgICAgY3JlYXRlTW9kZWwocHJvcGVydGllcyA9IHt9KSB7XG5cbiAgICAgICAgICAgIC8vIEVuc3VyZSB0aGUgbW9kZWwgY29uZm9ybXMgdG8gdGhlIGJsdWVwcmludC5cbiAgICAgICAgICAgIHZhciBtb2RlbCA9IHRoaXMuYmx1ZXByaW50Lml0ZXJhdGVBbGwocHJvcGVydGllcyk7XG5cbiAgICAgICAgICAgIHRoaXMuaW5qZWN0TWV0YShtb2RlbCk7XG4gICAgICAgICAgICBPYmplY3Quc2VhbChtb2RlbCk7XG4gICAgICAgICAgICB0aGlzLm1vZGVscy5wdXNoKG1vZGVsKTtcbiAgICAgICAgICAgIHRoaXMuaXNzdWVQcm9taXNlKCdjcmVhdGUnLCBtb2RlbCwgbnVsbCk7XG4gICAgICAgICAgICByZXR1cm4gbW9kZWw7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWV0aG9kIHJlYWRNb2RlbFxuICAgICAgICAgKiBAcGFyYW0gcHJvcGVydGllcyB7T2JqZWN0fVxuICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAgICAgICAqL1xuICAgICAgICByZWFkTW9kZWwocHJvcGVydGllcykge1xuICAgICAgICAgICAgdGhpcy5pc3N1ZVByb21pc2UoJ3JlYWQnLCBwcm9wZXJ0aWVzLCBudWxsKTtcbiAgICAgICAgICAgIHJldHVybiBwcm9wZXJ0aWVzO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZXRob2QgdXBkYXRlTW9kZWxcbiAgICAgICAgICogQHBhcmFtIG1vZGVsIHtPYmplY3R9XG4gICAgICAgICAqIEBwYXJhbSBwcm9wZXJ0aWVzIHtPYmplY3R9XG4gICAgICAgICAqIEByZXR1cm4ge09iamVjdH1cbiAgICAgICAgICovXG4gICAgICAgIHVwZGF0ZU1vZGVsKG1vZGVsLCBwcm9wZXJ0aWVzKSB7XG5cbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIGNvcHkgb2YgdGhlIG9sZCBtb2RlbCBmb3Igcm9sbGluZyBiYWNrLlxuICAgICAgICAgICAgdmFyIHByZXZpb3VzTW9kZWwgPSB7fTtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKG1vZGVsKS5mb3JFYWNoKHByb3BlcnR5ID0+IHByZXZpb3VzTW9kZWxbcHJvcGVydHldID0gbW9kZWxbcHJvcGVydHldKTtcblxuICAgICAgICAgICAgdHJ5IHtcblxuICAgICAgICAgICAgICAgIC8vIENvcHkgYWNyb3NzIHRoZSBkYXRhIGZyb20gdGhlIHByb3BlcnRpZXMuIFdlIHdyYXAgdGhlIGFzc2lnbm1lbnQgaW4gYSB0cnktY2F0Y2ggYmxvY2tcbiAgICAgICAgICAgICAgICAvLyBiZWNhdXNlIGlmIHRoZSB1c2VyIGhhcyBhZGRlZCBhbnkgYWRkaXRpb25hbCBwcm9wZXJ0aWVzIHRoYXQgZG9uJ3QgYmVsb25nIGluIHRoZSBtb2RlbCxcbiAgICAgICAgICAgICAgICAvLyBhbiBleGNlcHRpb24gd2lsbCBiZSByYWlzZWQgYmVjYXVzZSB0aGUgb2JqZWN0IGlzIHNlYWxlZC5cbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhwcm9wZXJ0aWVzKS5mb3JFYWNoKHByb3BlcnR5ID0+IG1vZGVsW3Byb3BlcnR5XSA9IHByb3BlcnRpZXNbcHJvcGVydHldKTtcblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHt9XG5cbiAgICAgICAgICAgIHRoaXMuaXNzdWVQcm9taXNlKCd1cGRhdGUnLCBtb2RlbCwgcHJldmlvdXNNb2RlbCk7XG4gICAgICAgICAgICByZXR1cm4gbW9kZWw7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWV0aG9kIGRlbGV0ZU1vZGVsXG4gICAgICAgICAqIEBwYXJhbSBtb2RlbCB7T2JqZWN0fVxuICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAgICAgICAqL1xuICAgICAgICBkZWxldGVNb2RlbChtb2RlbCkge1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEBtZXRob2QgcmVtb3ZlXG4gICAgICAgICAgICAgKiBAcGFyYW0gbW9kZWwge09iamVjdH1cbiAgICAgICAgICAgICAqIEBwYXJhbSBpbmRleCB7TnVtYmVyfVxuICAgICAgICAgICAgICogQHJldHVybiB7T2JqZWN0fVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgcmVtb3ZlID0gKG1vZGVsLCBpbmRleCkgPT4ge1xuXG4gICAgICAgICAgICAgICAgdGhpcy5pc3N1ZVByb21pc2UoJ2RlbGV0ZScsIG51bGwsIG1vZGVsKTtcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGVscy5zcGxpY2UoaW5kZXgsIDEpO1xuXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIERldGVybWluZXMgd2hldGhlciB0aGUgbW9kZWwgd2FzIHN1Y2Nlc3NmdWxseSBkZWxldGVkIHdpdGggZmluZGluZyB0aGUgbW9kZWwgYnkgcmVmZXJlbmNlLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSBkaWREZWxldGVWaWFSZWZlcmVuY2VcbiAgICAgICAgICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgZGlkRGVsZXRlVmlhUmVmZXJlbmNlID0gZmFsc2U7XG5cbiAgICAgICAgICAgICgoKSA9PiB7XG5cbiAgICAgICAgICAgICAgICAvLyBUcnkgdG8gZmluZCB0aGUgbW9kZWwgYnkgcmVmZXJlbmNlLlxuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMubW9kZWxzLmluZGV4T2YobW9kZWwpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBkaWREZWxldGVWaWFSZWZlcmVuY2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZW1vdmUodGhpcy5tb2RlbHNbaW5kZXhdLCBpbmRleCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9KSgpO1xuXG4gICAgICAgICAgICAoKCkgPT4ge1xuXG4gICAgICAgICAgICAgICAgaWYgKGRpZERlbGV0ZVZpYVJlZmVyZW5jZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gMDtcblxuICAgICAgICAgICAgICAgIC8vIFRyeSB0byBmaW5kIHRoZSBtb2RlbCBieSBpdHMgaW50ZXJuYWwgQ2F0d2FsayBJRC5cbiAgICAgICAgICAgICAgICB0aGlzLm1vZGVscy5mb3JFYWNoKChjdXJyZW50TW9kZWwpID0+IHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudE1vZGVsW0NBVFdBTEtfTUVUQV9QUk9QRVJUWV0uaWQgPT09IG1vZGVsW0NBVFdBTEtfTUVUQV9QUk9QRVJUWV0uaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZShjdXJyZW50TW9kZWwsIGluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGluZGV4Kys7XG5cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfSkoKTtcblxuICAgICAgICAgICAgcmV0dXJuIG1vZGVsO1xuXG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQG1ldGhvZCBpbmplY3RNZXRhXG4gICAgICAgICAqIEBwYXJhbSBtb2RlbCB7T2JqZWN0fVxuICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAgICAgICAqL1xuICAgICAgICBpbmplY3RNZXRhKG1vZGVsKSB7XG5cbiAgICAgICAgICAgIG1vZGVsW0NBVFdBTEtfTUVUQV9QUk9QRVJUWV0gPSB7XG4gICAgICAgICAgICAgICAgaWQ6ICsrdGhpcy5pZCxcbiAgICAgICAgICAgICAgICBzdGF0dXM6IENBVFdBTEtfU1RBVEVTX1BST1BFUlRJRVMuTkVXXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWV0aG9kIGlzc3VlUHJvbWlzZVxuICAgICAgICAgKiBAcGFyYW0gZXZlbnROYW1lIHtTdHJpbmd9XG4gICAgICAgICAqIEBwYXJhbSBjdXJyZW50TW9kZWwge09iamVjdH1cbiAgICAgICAgICogQHBhcmFtIHByZXZpb3VzTW9kZWwge09iamVjdH1cbiAgICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAgICovXG4gICAgICAgIGlzc3VlUHJvbWlzZShldmVudE5hbWUsIGN1cnJlbnRNb2RlbCwgcHJldmlvdXNNb2RlbCkge1xuXG4gICAgICAgICAgICBpZiAodGhpcy5zaWxlbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY2F0d2Fsay5ldmVudHNbZXZlbnROYW1lXSAhPT0gJ2Z1bmN0aW9uJykge1xuXG4gICAgICAgICAgICAgICAgLy8gQ2FsbGJhY2sgaGFzIG5vdCBhY3R1YWxseSBiZWVuIHNldC11cCBhbmQgdGhlcmVmb3JlIG1vZGVscyB3aWxsIG5ldmVyIGJlXG4gICAgICAgICAgICAgICAgLy8gcGVyc2lzdGVkLlxuICAgICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgICAgICAgICAgICAvLyBJc3N1ZSB0aGUgcHJvbWlzZSBmb3IgYmFjay1lbmQgcGVyc2lzdGVuY2Ugb2YgdGhlIG1vZGVsLlxuICAgICAgICAgICAgICAgIGNhdHdhbGsuZXZlbnRzW2V2ZW50TmFtZV0odGhpcy5uYW1lLCB0aGlzLmNsZWFuTW9kZWwoY3VycmVudE1vZGVsIHx8IHByZXZpb3VzTW9kZWwpLCB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHJlc29sdmUsIHJlamVjdDogcmVqZWN0XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH0pLnRoZW4oKHJlc29sdXRpb25QYXJhbXMpID0+IHtcblxuICAgICAgICAgICAgICAgIC8vIFByb21pc2UgaGFzIGJlZW4gcmVzb2x2ZWQhXG4gICAgICAgICAgICAgICAgdGhpcy5yZXNvbHZlUHJvbWlzZShldmVudE5hbWUsIGN1cnJlbnRNb2RlbCwgcHJldmlvdXNNb2RlbCkocmVzb2x1dGlvblBhcmFtcyk7XG5cbiAgICAgICAgICAgIH0sIChyZXNvbHV0aW9uUGFyYW1zKSA9PiB7XG5cbiAgICAgICAgICAgICAgICAvLyBQcm9taXNlIGhhcyBiZWVuIHJlamVjdGVkIVxuICAgICAgICAgICAgICAgIHRoaXMucmVqZWN0UHJvbWlzZShldmVudE5hbWUsIGN1cnJlbnRNb2RlbCwgcHJldmlvdXNNb2RlbCkocmVzb2x1dGlvblBhcmFtcyk7XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQG1ldGhvZCByZXNvbHZlUHJvbWlzZVxuICAgICAgICAgKiBAcGFyYW0gZXZlbnROYW1lIHtTdHJpbmd9IC0gRXZlbnQgbmFtZSBpcyBhY3R1YWxseSBub3QgcmVxdWlyZWQsIGJlY2F1c2Ugd2UgY2FuIGRlZHVjZSB0aGUgc3Vic2VxdWVudCBhY3Rpb25cbiAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gdGhlIHN0YXRlIG9mIHRoZSBgY3VycmVudE1vZGVsYCBhbmQgYHByZXZpb3VzTW9kZWxgLCBidXQgd2UgYWRkIGl0IHRvIGFkZFxuICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhcmlmaWNhdGlvbiB0byBvdXIgbG9naWNhbCBzdGVwcy5cbiAgICAgICAgICogQHBhcmFtIGN1cnJlbnRNb2RlbCB7T2JqZWN0fVxuICAgICAgICAgKiBAcGFyYW0gcHJldmlvdXNNb2RlbCB7T2JqZWN0fVxuICAgICAgICAgKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAgICAgICAgICovXG4gICAgICAgIHJlc29sdmVQcm9taXNlKGV2ZW50TmFtZSwgY3VycmVudE1vZGVsLCBwcmV2aW91c01vZGVsKSB7XG5cbiAgICAgICAgICAgIGlmIChjdXJyZW50TW9kZWwgJiYgZXZlbnROYW1lID09PSAnY3JlYXRlJykge1xuXG4gICAgICAgICAgICAgICAgLy8gTW9kZWwgaGFzIGJlZW4gc3VjY2Vzc2Z1bGx5IHBlcnNpc3RlZCFcbiAgICAgICAgICAgICAgICBjdXJyZW50TW9kZWxbQ0FUV0FMS19NRVRBX1BST1BFUlRZXS5zdGF0dXMgPSBDQVRXQUxLX1NUQVRFU19QUk9QRVJUSUVTLlNBVkVEO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFdoZW4gd2UncmUgaW4gdGhlIHByb2Nlc3Mgb2YgZGVsZXRpbmcgYSBtb2RlbCwgdGhlIGBjdXJyZW50TW9kZWxgIGlzIHVuc2V0OyBpbnN0ZWFkIHRoZVxuICAgICAgICAgICAgLy8gYHByZXZpb3VzTW9kZWxgIHdpbGwgYmUgZGVmaW5lZC5cbiAgICAgICAgICAgIGlmICgoY3VycmVudE1vZGVsID09PSBudWxsICYmIHByZXZpb3VzTW9kZWwpICYmIGV2ZW50TmFtZSA9PT0gJ2RlbGV0ZScpIHtcblxuICAgICAgICAgICAgICAgIC8vIE1vZGVsIGhhcyBiZWVuIHN1Y2Nlc3NmdWxseSBkZWxldGVkIVxuICAgICAgICAgICAgICAgIHByZXZpb3VzTW9kZWxbQ0FUV0FMS19NRVRBX1BST1BFUlRZXS5zdGF0dXMgPSBDQVRXQUxLX1NUQVRFU19QUk9QRVJUSUVTLkRFTEVURUQ7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIChwcm9wZXJ0aWVzKSA9PiB7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnNpbGVudGx5KCgpID0+IHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAocHJvcGVydGllcyAmJiBldmVudE5hbWUgIT09ICdyZWFkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVNb2RlbChjdXJyZW50TW9kZWwsIHByb3BlcnRpZXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHByb3BlcnRpZXMgJiYgIXByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkoQ0FUV0FMS19NRVRBX1BST1BFUlRZKSAmJiBldmVudE5hbWUgPT09ICdyZWFkJykge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbW9kZWwgPSB0aGlzLmNyZWF0ZU1vZGVsKHByb3BlcnRpZXMpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgdGhlIG1vZGVsIHRvIHJlZmxlY3QgdGhlIGNoYW5nZXMgb24gdGhlIG9iamVjdCB0aGF0IGByZWFkTW9kZWxgIHJldHVybi5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlTW9kZWwoY3VycmVudE1vZGVsLCBtb2RlbCk7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmNvbmRpdGlvbmFsbHlFbWl0RXZlbnQoKTtcblxuICAgICAgICAgICAgfTtcblxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZXRob2QgcmVqZWN0UHJvbWlzZVxuICAgICAgICAgKiBAcGFyYW0gZXZlbnROYW1lIHtTdHJpbmd9XG4gICAgICAgICAqIEBwYXJhbSBjdXJyZW50TW9kZWwge09iamVjdH1cbiAgICAgICAgICogQHBhcmFtIHByZXZpb3VzTW9kZWwge09iamVjdH1cbiAgICAgICAgICogQHJldHVybiB7RnVuY3Rpb259XG4gICAgICAgICAqL1xuICAgICAgICByZWplY3RQcm9taXNlKGV2ZW50TmFtZSwgY3VycmVudE1vZGVsLCBwcmV2aW91c01vZGVsKSB7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQG1ldGhvZCByZWplY3RXaXRoXG4gICAgICAgICAgICAgKiBAcGFyYW0gZHVwbGljYXRlTW9kZWwge09iamVjdH1cbiAgICAgICAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhciByZWplY3RXaXRoID0gKGR1cGxpY2F0ZU1vZGVsKSA9PiB7XG5cbiAgICAgICAgICAgICAgICBpZiAoZHVwbGljYXRlTW9kZWwpIHtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNpbGVudGx5KCgpID0+IHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50TmFtZSA9PT0gJ3VwZGF0ZScgJiYgZHVwbGljYXRlTW9kZWwuaGFzT3duUHJvcGVydHkoQ0FUV0FMS19NRVRBX1BST1BFUlRZKSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVXNlciBwYXNzZWQgaW4gYSBtb2RlbCBhbmQgdGhlcmVmb3JlIHRoZSBwcmV2aW91cyBzaG91bGQgYmUgZGVsZXRlZCwgYnV0IG9ubHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3aGVuIHdlJ3JlIHVwZGF0aW5nIVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGVsZXRlTW9kZWwocHJldmlvdXNNb2RlbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNNb2RlbFtDQVRXQUxLX01FVEFfUFJPUEVSVFldLnN0YXR1cyA9IENBVFdBTEtfU1RBVEVTX1BST1BFUlRJRVMuREVMRVRFRDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBVc2UgdGhlIGR1cGxpY2F0ZSBtb2RlbCBhcyB0aGUgcmVmZXJlbmNlLlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVNb2RlbChjdXJyZW50TW9kZWwsIGR1cGxpY2F0ZU1vZGVsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRNb2RlbFtDQVRXQUxLX01FVEFfUFJPUEVSVFldLnN0YXR1cyA9IENBVFdBTEtfU1RBVEVTX1BST1BFUlRJRVMuU0FWRUQ7XG5cbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLmNvbmRpdGlvbmFsbHlFbWl0RXZlbnQoKTtcblxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaWYgKHByZXZpb3VzTW9kZWwgPT09IG51bGwgJiYgZXZlbnROYW1lID09PSAnY3JlYXRlJykge1xuXG4gICAgICAgICAgICAgICAgdGhpcy5zaWxlbnRseSgoKSA9PiB7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gUHJldmlvdXMgbW9kZWwgd2FzIGFjdHVhbGx5IE5VTEwgYW5kIHRoZXJlZm9yZSB3ZSdsbCBkZWxldGUgaXQuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGVsZXRlTW9kZWwoY3VycmVudE1vZGVsKTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudE1vZGVsW0NBVFdBTEtfTUVUQV9QUk9QRVJUWV0uc3RhdHVzID0gQ0FUV0FMS19TVEFURVNfUFJPUEVSVElFUy5ERUxFVEVEO1xuXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0V2l0aDtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY3VycmVudE1vZGVsID09PSBudWxsICYmIGV2ZW50TmFtZSA9PT0gJ2RlbGV0ZScgKSB7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnNpbGVudGx5KCgpID0+IHtcblxuICAgICAgICAgICAgICAgICAgICAvLyBEZXZlbG9wZXIgZG9lc24ndCBhY3R1YWxseSB3YW50IHRvIGRlbGV0ZSB0aGUgbW9kZWwsIGFuZCB0aGVyZWZvcmUgd2UgbmVlZCB0byByZXZlcnQgaXQgdG9cbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIG1vZGVsIGl0IHdhcywgYW5kIHNldCBpdHMgZmxhZyBiYWNrIHRvIHdoYXQgaXQgd2FzLlxuICAgICAgICAgICAgICAgICAgICB2YXIgbW9kZWwgPSB0aGlzLnVwZGF0ZU1vZGVsKHt9LCBwcmV2aW91c01vZGVsKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2RlbHMucHVzaChtb2RlbCk7XG5cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoKGN1cnJlbnRNb2RlbCAmJiBwcmV2aW91c01vZGVsKSAmJiBldmVudE5hbWUgPT09ICd1cGRhdGUnKSB7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnNpbGVudGx5KCgpID0+IHtcblxuICAgICAgICAgICAgICAgICAgICAvLyBCb3RoIG9mIHRoZSBjdXJyZW50IGFuZCBwcmV2aW91cyBtb2RlbHMgYXJlIHVwZGF0ZWQsIGFuZCB0aGVyZWZvcmUgd2UnbGwgc2ltcGx5XG4gICAgICAgICAgICAgICAgICAgIC8vIHJldmVydCB0aGUgY3VycmVudCBtb2RlbCB0byB0aGUgcHJldmlvdXMgbW9kZWwuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlTW9kZWwoY3VycmVudE1vZGVsLCBwcmV2aW91c01vZGVsKTtcblxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiByZWplY3RXaXRoO1xuXG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQG1ldGhvZCBjb25kaXRpb25hbGx5RW1pdEV2ZW50XG4gICAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgICAqL1xuICAgICAgICBjb25kaXRpb25hbGx5RW1pdEV2ZW50KCkge1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNhdHdhbGsuZXZlbnRzLnJlZnJlc2ggPT09ICdmdW5jdGlvbicpIHtcblxuICAgICAgICAgICAgICAgIC8vIFdlJ3JlIGFsbCBkb25lIVxuICAgICAgICAgICAgICAgIGNhdHdhbGsuZXZlbnRzLnJlZnJlc2goKTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQG1ldGhvZCBjbGVhbk1vZGVsXG4gICAgICAgICAqIEBwYXJhbSBtb2RlbCB7T2JqZWN0fVxuICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAgICAgICAqL1xuICAgICAgICBjbGVhbk1vZGVsKG1vZGVsKSB7XG5cbiAgICAgICAgICAgIHZhciBjbGVhbmVkTW9kZWwgPSB7fTtcblxuICAgICAgICAgICAgT2JqZWN0LmtleXMobW9kZWwpLmZvckVhY2gocHJvcGVydHkgPT4ge1xuXG4gICAgICAgICAgICAgICAgaWYgKHByb3BlcnR5ID09PSBDQVRXQUxLX01FVEFfUFJPUEVSVFkpIHtcblxuICAgICAgICAgICAgICAgICAgICAvLyBDYXR3YWxrIG1ldGEgZGF0YSBzaG91bGQgbmV2ZXIgYmUgcGVyc2lzdGVkLlxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjbGVhbmVkTW9kZWxbcHJvcGVydHldID0gbW9kZWxbcHJvcGVydHldO1xuXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIGNsZWFuZWRNb2RlbDtcblxuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAY2xhc3MgQmx1ZXByaW50TW9kZWxcbiAgICAgKi9cbiAgICBjbGFzcyBCbHVlcHJpbnRNb2RlbCB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKiBAcGFyYW0gbmFtZSB7U3RyaW5nfVxuICAgICAgICAgKiBAcGFyYW0gYmx1ZXByaW50IHtPYmplY3R9XG4gICAgICAgICAqIEByZXR1cm4ge0JsdWVwcmludE1vZGVsfVxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3RydWN0b3IobmFtZSwgYmx1ZXByaW50KSB7XG4gICAgICAgICAgICB0aGlzLm5hbWUgID0gbmFtZTtcbiAgICAgICAgICAgIHRoaXMubW9kZWwgPSBPYmplY3QuZnJlZXplKGJsdWVwcmludCk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29udmVuaWVuY2UgbWV0aG9kIHRoYXQgd3JhcHMgYGl0ZXJhdGVQcm9wZXJ0aWVzYCBhbmQgYGl0ZXJhdGVCbHVlcHJpbnRgIGludG8gYSBvbmUtbGluZXIuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZXRob2QgaXRlcmF0ZUFsbFxuICAgICAgICAgKiBAcGFyYW0gcHJvcGVydGllcyB7T2JqZWN0fVxuICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAgICAgICAqL1xuICAgICAgICBpdGVyYXRlQWxsKHByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgIHZhciBtb2RlbCA9IHRoaXMuaXRlcmF0ZVByb3BlcnRpZXMocHJvcGVydGllcyk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pdGVyYXRlQmx1ZXByaW50KG1vZGVsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXNwb25zaWJsZSBmb3IgaXRlcmF0aW5nIG92ZXIgdGhlIHBhc3NlZCBpbiBtb2RlbCBwcm9wZXJ0aWVzIHRvIGVuc3VyZSB0aGV5J3JlIGluIHRoZSBibHVlcHJpbnQsXG4gICAgICAgICAqIGFuZCB0eXBlY2FzdGluZyB0aGUgcHJvcGVydGllcyBiYXNlZCBvbiB0aGUgZGVmaW5lIGJsdWVwcmludCBmb3IgdGhlIGN1cnJlbnQgY29sbGVjdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1ldGhvZCBpdGVyYXRlUHJvcGVydGllc1xuICAgICAgICAgKiBAcGFyYW0gcHJvcGVydGllcyB7T2JqZWN0fVxuICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAgICAgICAqL1xuICAgICAgICBpdGVyYXRlUHJvcGVydGllcyhwcm9wZXJ0aWVzKSB7XG5cbiAgICAgICAgICAgIHZhciBtb2RlbCA9IHt9O1xuXG4gICAgICAgICAgICBPYmplY3Qua2V5cyhwcm9wZXJ0aWVzKS5mb3JFYWNoKHByb3BlcnR5ID0+IHtcblxuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSAgICAgICAgICAgPSBwcm9wZXJ0aWVzW3Byb3BlcnR5XSxcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlIYW5kbGVyID0gdGhpcy5tb2RlbFtwcm9wZXJ0eV07XG5cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHByb3BlcnR5SGFuZGxlciA9PT0gJ3VuZGVmaW5lZCcpIHtcblxuICAgICAgICAgICAgICAgICAgICAvLyBQcm9wZXJ0eSBkb2Vzbid0IGJlbG9uZyBpbiB0aGUgbW9kZWwgYmVjYXVzZSBpdCdzIG5vdCBpbiB0aGUgYmx1ZXByaW50LlxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAocHJvcGVydHlIYW5kbGVyIGluc3RhbmNlb2YgUmVsYXRpb25zaGlwQWJzdHJhY3QpIHtcblxuICAgICAgICAgICAgICAgICAgICAvLyBQcm9wZXJ0eSBpcyBhY3R1YWxseSBhIHJlbGF0aW9uc2hpcCB0byBhbm90aGVyIGNvbGxlY3Rpb24uXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2RlbCwgcHJvcGVydHksIHByb3BlcnR5SGFuZGxlci5kZWZpbmVSZWxhdGlvbnNoaXAodGhpcy5uYW1lLCBwcm9wZXJ0eSkpO1xuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eUhhbmRsZXIuc2V0VmFsdWVzKHByb3BlcnRpZXNbcHJvcGVydHldKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcHJvcGVydHlIYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gVHlwZWNhc3QgcHJvcGVydHkgdG8gdGhlIGRlZmluZWQgdHlwZS5cbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBwcm9wZXJ0eUhhbmRsZXIodmFsdWUpO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbW9kZWxbcHJvcGVydHldID0gdmFsdWU7XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gbW9kZWw7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXNwb25zaWJsZSBmb3IgaXRlcmF0aW5nIG92ZXIgdGhlIGJsdWVwcmludCB0byBkZXRlcm1pbmUgaWYgYW55IHByb3BlcnRpZXMgYXJlIG1pc3NpbmdcbiAgICAgICAgICogZnJvbSB0aGUgY3VycmVudCBtb2RlbCwgdGhhdCBoYXZlIGJlZW4gZGVmaW5lZCBpbiB0aGUgYmx1ZXByaW50IGFuZCB0aGVyZWZvcmUgc2hvdWxkIGJlXG4gICAgICAgICAqIHByZXNlbnQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZXRob2QgaXRlcmF0ZUJsdWVwcmludFxuICAgICAgICAgKiBAcGFyYW0gbW9kZWwge09iamVjdH1cbiAgICAgICAgICogQHJldHVybiB7T2JqZWN0fVxuICAgICAgICAgKi9cbiAgICAgICAgaXRlcmF0ZUJsdWVwcmludChtb2RlbCkge1xuXG4gICAgICAgICAgICBPYmplY3Qua2V5cyh0aGlzLm1vZGVsKS5mb3JFYWNoKHByb3BlcnR5ID0+IHtcblxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbW9kZWxbcHJvcGVydHldID09PSAndW5kZWZpbmVkJykge1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIEVuc3VyZSB0aGF0IGl0IGlzIGRlZmluZWQuXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsW3Byb3BlcnR5XSA9IHRoaXMubW9kZWxbcHJvcGVydHldO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5tb2RlbFtwcm9wZXJ0eV0gPT09ICdmdW5jdGlvbicpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRGV0ZXJtaW5lIGlmIHRoZSBwcm9wZXJ0eSBoYXMgYSBwcm9wZXJ0eSBoYW5kbGVyIG1ldGhvZCB3aGljaCB3b3VsZCBiZSByZXNwb25zaWJsZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZm9yIHR5cGVjYXN0aW5nLCBhbmQgZGV0ZXJtaW5pbmcgdGhlIGRlZmF1bHQgdmFsdWUuXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcHJvcGVydHlIYW5kbGVyID0gdGhpcy5tb2RlbFtwcm9wZXJ0eV07XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbFtwcm9wZXJ0eV0gICAgID0gcHJvcGVydHlIYW5kbGVyKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIG1vZGVsO1xuXG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBjbGFzcyBUeXBlY2FzdFxuICAgICAqL1xuICAgIGNsYXNzIFR5cGVjYXN0IHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQG1ldGhvZCByZXR1cm5WYWx1ZVxuICAgICAgICAgKiBAcGFyYW0gdHlwZWNhc3RDb25zdHJ1Y3RvciB7RnVuY3Rpb259XG4gICAgICAgICAqIEBwYXJhbSB2YWx1ZSB7Kn1cbiAgICAgICAgICogQHBhcmFtIGRlZmF1bHRWYWx1ZSB7Kn1cbiAgICAgICAgICogQHJldHVybiB7Kn1cbiAgICAgICAgICovXG4gICAgICAgIHJldHVyblZhbHVlKHR5cGVjYXN0Q29uc3RydWN0b3IsIHZhbHVlLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0eXBlY2FzdENvbnN0cnVjdG9yKHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcgPyB2YWx1ZSA6IGRlZmF1bHRWYWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQG1ldGhvZCBzdHJpbmdcbiAgICAgICAgICogQHBhcmFtIGRlZmF1bHRWYWx1ZSB7U3RyaW5nfVxuICAgICAgICAgKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAgICAgICAgICovXG4gICAgICAgIHN0cmluZyhkZWZhdWx0VmFsdWUgPSAnJykge1xuXG4gICAgICAgICAgICByZXR1cm4gKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmV0dXJuVmFsdWUoU3RyaW5nLCB2YWx1ZSwgZGVmYXVsdFZhbHVlKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWV0aG9kIGJvb2xlYW5cbiAgICAgICAgICogQHBhcmFtIGRlZmF1bHRWYWx1ZSB7Qm9vbGVhbn1cbiAgICAgICAgICogQHJldHVybiB7RnVuY3Rpb259XG4gICAgICAgICAqL1xuICAgICAgICBib29sZWFuKGRlZmF1bHRWYWx1ZSA9IHRydWUpIHtcblxuICAgICAgICAgICAgcmV0dXJuICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJldHVyblZhbHVlKEJvb2xlYW4sIHZhbHVlLCBkZWZhdWx0VmFsdWUpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZXRob2QgbnVtYmVyXG4gICAgICAgICAqIEBwYXJhbSBkZWZhdWx0VmFsdWUge051bWJlcn1cbiAgICAgICAgICogQHJldHVybiB7RnVuY3Rpb259XG4gICAgICAgICAqL1xuICAgICAgICBudW1iZXIoZGVmYXVsdFZhbHVlID0gMCkge1xuXG4gICAgICAgICAgICByZXR1cm4gKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmV0dXJuVmFsdWUoTnVtYmVyLCB2YWx1ZSwgZGVmYXVsdFZhbHVlKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGNsYXNzIFJlbGF0aW9uc2hpcFxuICAgICAqL1xuICAgIGNsYXNzIFJlbGF0aW9uc2hpcCB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZXRob2QgaGFzT25lXG4gICAgICAgICAqIEBwYXJhbSBmb3JlaWduS2V5IHtTdHJpbmd9XG4gICAgICAgICAqIEBwYXJhbSBjb2xsZWN0aW9uTmFtZSB7U3RyaW5nfVxuICAgICAgICAgKiBAcmV0dXJuIHtSZWxhdGlvbnNoaXBIYXNPbmV9XG4gICAgICAgICAqL1xuICAgICAgICBoYXNPbmUoZm9yZWlnbktleSwgY29sbGVjdGlvbk5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmVsYXRpb25zaGlwSGFzT25lKGZvcmVpZ25LZXksIGNvbGxlY3Rpb25OYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWV0aG9kIGhhc01hbnlcbiAgICAgICAgICogQHBhcmFtIGZvcmVpZ25LZXkge1N0cmluZ31cbiAgICAgICAgICogQHBhcmFtIGNvbGxlY3Rpb25OYW1lIHtTdHJpbmd9XG4gICAgICAgICAqIEByZXR1cm4ge1JlbGF0aW9uc2hpcEhhc01hbnl9XG4gICAgICAgICAqL1xuICAgICAgICBoYXNNYW55KGZvcmVpZ25LZXksIGNvbGxlY3Rpb25OYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFJlbGF0aW9uc2hpcEhhc01hbnkoZm9yZWlnbktleSwgY29sbGVjdGlvbk5hbWUpO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAY2xhc3MgUmVsYXRpb25zaGlwQWJzdHJhY3RcbiAgICAgKi9cbiAgICBjbGFzcyBSZWxhdGlvbnNoaXBBYnN0cmFjdCB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKiBAcGFyYW0gZm9yZWlnbktleSB7U3RyaW5nfVxuICAgICAgICAgKiBAcGFyYW0gY29sbGVjdGlvbk5hbWUge1N0cmluZ31cbiAgICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0cnVjdG9yKGZvcmVpZ25LZXksIGNvbGxlY3Rpb25OYW1lKSB7XG5cbiAgICAgICAgICAgIHRoaXMudGFyZ2V0ID0ge1xuICAgICAgICAgICAgICAgIGNvbGxlY3Rpb246IGNvbGxlY3Rpb25OYW1lLFxuICAgICAgICAgICAgICAgIGtleTogZm9yZWlnbktleVxuICAgICAgICAgICAgfTtcblxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZXRob2Qgc2V0VmFsdWVzXG4gICAgICAgICAqIEBwYXJhbSBtb2RlbCB7T2JqZWN0fVxuICAgICAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAgICAgKi9cbiAgICAgICAgc2V0VmFsdWVzKHZhbHVlcykge1xuICAgICAgICAgICAgdGhpcy52YWx1ZXMgPSB0aGlzLnZhbHVlID0gdmFsdWVzO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZXRob2QgZGVmaW5lUmVsYXRpb25zaGlwXG4gICAgICAgICAqIEBwYXJhbSBjb2xsZWN0aW9uTmFtZSB7U3RyaW5nfVxuICAgICAgICAgKiBAcGFyYW0gbG9jYWxLZXkge1N0cmluZ31cbiAgICAgICAgICogQHBhcmFtIGFjY2Vzc29yRnVuY3Rpb25zIHtGdW5jdGlvbn1cbiAgICAgICAgICogQHJldHVybiB7T2JqZWN0fVxuICAgICAgICAgKi9cbiAgICAgICAgZGVmaW5lUmVsYXRpb25zaGlwKGNvbGxlY3Rpb25OYW1lLCBsb2NhbEtleSwgYWNjZXNzb3JGdW5jdGlvbnMpIHtcblxuICAgICAgICAgICAgdGhpcy5zb3VyY2UgPSB7XG4gICAgICAgICAgICAgICAgY29sbGVjdGlvbjogY29sbGVjdGlvbk5hbWUsXG4gICAgICAgICAgICAgICAga2V5OiBsb2NhbEtleVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGFjY2Vzc29yRnVuY3Rpb25zLmdldCxcbiAgICAgICAgICAgICAgICBzZXQ6IGFjY2Vzc29yRnVuY3Rpb25zLnNldFxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBjbGFzcyBSZWxhdGlvbnNoaXBIYXNNYW55XG4gICAgICovXG4gICAgY2xhc3MgUmVsYXRpb25zaGlwSGFzTWFueSBleHRlbmRzIFJlbGF0aW9uc2hpcEFic3RyYWN0IHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQG1ldGhvZCBkZWZpbmVSZWxhdGlvbnNoaXBcbiAgICAgICAgICogQHBhcmFtIGNvbGxlY3Rpb25OYW1lIHtTdHJpbmd9XG4gICAgICAgICAqIEBwYXJhbSBsb2NhbEtleSB7U3RyaW5nfVxuICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAgICAgICAqL1xuICAgICAgICBkZWZpbmVSZWxhdGlvbnNoaXAoY29sbGVjdGlvbk5hbWUsIGxvY2FsS2V5KSB7XG5cbiAgICAgICAgICAgIHJldHVybiBzdXBlcihjb2xsZWN0aW9uTmFtZSwgbG9jYWxLZXksIHtcbiAgICAgICAgICAgICAgICBnZXQ6IHRoaXMuZ2V0TW9kZWxzLmJpbmQodGhpcyksXG4gICAgICAgICAgICAgICAgc2V0OiB0aGlzLnNldE1vZGVscy5iaW5kKHRoaXMpXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZXRob2QgZ2V0TW9kZWxzXG4gICAgICAgICAqIEByZXR1cm4ge0FycmF5fVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0TW9kZWxzKCkge1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEBtZXRob2QgbG9hZE1vZGVsc1xuICAgICAgICAgICAgICogQHJldHVybiB7QXJyYXl9XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhciBsb2FkTW9kZWxzID0gKCkgPT4ge1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZvcmVpZ25Db2xsZWN0aW9uLm1vZGVscy5maWx0ZXIoKGZvcmVpZ25Nb2RlbCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZXMuaW5kZXhPZihmb3JlaWduTW9kZWxbdGhpcy50YXJnZXQua2V5XSkgIT09IC0xO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB2YXIgYXJyYXlEaWZmID0gKGZpcnN0QXJyYXksIHNlY29uZEFycmF5KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZpcnN0QXJyYXkuZmlsdGVyKGZ1bmN0aW9uKGkpIHtyZXR1cm4gc2Vjb25kQXJyYXkuaW5kZXhPZihpKSA8IDA7fSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB2YXIgZm9yZWlnbkNvbGxlY3Rpb24gPSBjYXR3YWxrLmNvbGxlY3Rpb24odGhpcy50YXJnZXQuY29sbGVjdGlvbiksXG4gICAgICAgICAgICAgICAgbW9kZWxzICAgICAgICAgICAgPSBsb2FkTW9kZWxzKCk7XG5cbiAgICAgICAgICAgIC8vIElmIHRoZXJlIGlzIGEgZGlzY3JlcGFuY3kgYmV0d2VlbiB0aGUgY291bnRzLCB0aGVuIHdlIGtub3cgYWxsIHRoZSBtb2RlbHMgaGF2ZW4ndCBiZWVuIGxvYWRlZC5cbiAgICAgICAgICAgIGlmIChtb2RlbHMubGVuZ3RoICE9PSB0aGlzLnZhbHVlcy5sZW5ndGgpIHtcblxuICAgICAgICAgICAgICAgIC8vIERpc2NvdmVyIHRoZSBrZXlzIHRoYXQgYXJlIGN1cnJlbnRseSBub3QgbG9hZGVkLlxuICAgICAgICAgICAgICAgIHZhciBsb2FkZWRLZXlzICAgPSBtb2RlbHMubWFwKG1vZGVsID0+IG1vZGVsW3RoaXMudGFyZ2V0LmtleV0pLFxuICAgICAgICAgICAgICAgICAgICByZXF1aXJlZEtleXMgPSBhcnJheURpZmYodGhpcy52YWx1ZXMsIGxvYWRlZEtleXMpO1xuXG4gICAgICAgICAgICAgICAgcmVxdWlyZWRLZXlzLmZvckVhY2goKGZvcmVpZ25LZXkpID0+IHtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVxdWlyZWRNb2RlbCA9IHt9O1xuICAgICAgICAgICAgICAgICAgICByZXF1aXJlZE1vZGVsW3RoaXMudGFyZ2V0LmtleV0gPSBmb3JlaWduS2V5O1xuICAgICAgICAgICAgICAgICAgICBmb3JlaWduQ29sbGVjdGlvbi5yZWFkTW9kZWwocmVxdWlyZWRNb2RlbCk7XG5cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vIEF0dGVtcHQgdG8gcmVhZCB0aGUgbW9kZWxzIGFnYWluIGltbWVkaWF0ZWx5LlxuICAgICAgICAgICAgICAgIG1vZGVscyA9IGxvYWRNb2RlbHMoKTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbW9kZWxzO1xuXG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQG1ldGhvZCBzZXRNb2RlbHNcbiAgICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAgICovXG4gICAgICAgIHNldE1vZGVscyh2YWx1ZXMpIHtcbiAgICAgICAgICAgIHRoaXMudmFsdWVzID0gdmFsdWVzO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAY2xhc3MgUmVsYXRpb25zaGlwSGFzT25lXG4gICAgICovXG4gICAgY2xhc3MgUmVsYXRpb25zaGlwSGFzT25lIGV4dGVuZHMgUmVsYXRpb25zaGlwQWJzdHJhY3Qge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWV0aG9kIGRlZmluZVJlbGF0aW9uc2hpcFxuICAgICAgICAgKiBAcGFyYW0gY29sbGVjdGlvbk5hbWUge1N0cmluZ31cbiAgICAgICAgICogQHBhcmFtIGxvY2FsS2V5IHtTdHJpbmd9XG4gICAgICAgICAqIEByZXR1cm4ge09iamVjdH1cbiAgICAgICAgICovXG4gICAgICAgIGRlZmluZVJlbGF0aW9uc2hpcChjb2xsZWN0aW9uTmFtZSwgbG9jYWxLZXkpIHtcblxuICAgICAgICAgICAgcmV0dXJuIHN1cGVyKGNvbGxlY3Rpb25OYW1lLCBsb2NhbEtleSwge1xuICAgICAgICAgICAgICAgIGdldDogdGhpcy5nZXRNb2RlbC5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgICAgIHNldDogdGhpcy5zZXRNb2RlbC5iaW5kKHRoaXMpXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZXRob2QgZ2V0TW9kZWxcbiAgICAgICAgICogQHJldHVybiB7QXJyYXl9XG4gICAgICAgICAqL1xuICAgICAgICBnZXRNb2RlbCgpIHtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBAbWV0aG9kIGxvYWRNb2RlbFxuICAgICAgICAgICAgICogQHJldHVybiB7T2JqZWN0fVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgbG9hZE1vZGVsID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBmb3JlaWduQ29sbGVjdGlvbi5tb2RlbHMuZmluZCgoZm9yZWlnbk1vZGVsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlID09PSBmb3JlaWduTW9kZWxbdGhpcy50YXJnZXQua2V5XTtcbiAgICAgICAgICAgICAgICB9KTsgIFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdmFyIGZvcmVpZ25Db2xsZWN0aW9uID0gY2F0d2Fsay5jb2xsZWN0aW9uKHRoaXMudGFyZ2V0LmNvbGxlY3Rpb24pLFxuICAgICAgICAgICAgICAgIG1vZGVsICAgICAgICAgICAgID0gbG9hZE1vZGVsKCk7XG5cbiAgICAgICAgICAgIGlmICghbW9kZWwpIHtcblxuICAgICAgICAgICAgICAgIC8vIE1vZGVsIGNhbm5vdCBiZSBmb3VuZCBhbmQgdGhlcmVmb3JlIHdlJ2xsIGF0dGVtcHQgdG8gcmVhZCB0aGUgbW9kZWwgaW50byB0aGUgY29sbGVjdGlvbi5cbiAgICAgICAgICAgICAgICB2YXIgcmVxdWlyZWRNb2RlbCAgID0ge307XG4gICAgICAgICAgICAgICAgcmVxdWlyZWRNb2RlbFt0aGlzLnRhcmdldC5rZXldID0gdGhpcy52YWx1ZTtcbiAgICAgICAgICAgICAgICBmb3JlaWduQ29sbGVjdGlvbi5yZWFkTW9kZWwocmVxdWlyZWRNb2RlbCk7XG5cbiAgICAgICAgICAgICAgICAvLyBBdHRlbXB0IHRvIHJlYWQgdGhlIG1vZGVsIGFnYWluIGltbWVkaWF0ZWx5LlxuICAgICAgICAgICAgICAgIG1vZGVsID0gbG9hZE1vZGVsKCk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG1vZGVsO1xuXG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQG1ldGhvZCBzZXRNb2RlbFxuICAgICAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAgICAgKi9cbiAgICAgICAgc2V0TW9kZWwodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgLy8gSW5zdGFudGlhdGUgdGhlIENhdHdhbGsgY2xhc3MuXG4gICAgJHdpbmRvdy5jYXR3YWxrID0gbmV3IENhdHdhbGsoKTtcblxufSkod2luZG93KTsiLCJ2YXIgJF9fcGxhY2Vob2xkZXJfXzAgPSAkX19wbGFjZWhvbGRlcl9fMSIsIigkdHJhY2V1clJ1bnRpbWUuY3JlYXRlQ2xhc3MpKCRfX3BsYWNlaG9sZGVyX18wLCAkX19wbGFjZWhvbGRlcl9fMSwgJF9fcGxhY2Vob2xkZXJfXzIpIiwiJHRyYWNldXJSdW50aW1lLmRlZmF1bHRTdXBlckNhbGwodGhpcyxcbiAgICAgICAgICAgICAgICAkX19wbGFjZWhvbGRlcl9fMC5wcm90b3R5cGUsIGFyZ3VtZW50cykiLCJ2YXIgJF9fcGxhY2Vob2xkZXJfXzAgPSAkX19wbGFjZWhvbGRlcl9fMSIsIigkdHJhY2V1clJ1bnRpbWUuY3JlYXRlQ2xhc3MpKCRfX3BsYWNlaG9sZGVyX18wLCAkX19wbGFjZWhvbGRlcl9fMSwgJF9fcGxhY2Vob2xkZXJfXzIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkX19wbGFjZWhvbGRlcl9fMykiLCIkdHJhY2V1clJ1bnRpbWUuc3VwZXJDYWxsKCRfX3BsYWNlaG9sZGVyX18wLCAkX19wbGFjZWhvbGRlcl9fMSwgJF9fcGxhY2Vob2xkZXJfXzIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRfX3BsYWNlaG9sZGVyX18zKSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
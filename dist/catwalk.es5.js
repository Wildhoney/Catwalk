"use strict";
(function($window) {
  "use strict";
  var CATWALK_META_PROPERTY = '__catwalk';
  var CATWALK_STATES_PROPERTIES = {
    NEW: 1,
    DIRTY: 2,
    SAVED: 4,
    DELETED: 8
  };
  var Catwalk = function Catwalk() {
    this.events = {};
    this.collections = {};
    this.relationship = new Relationship();
    this.typecast = new Typecast();
  };
  ($traceurRuntime.createClass)(Catwalk, {
    createCollection: function(name, properties) {
      var collection = new Collection(name, properties);
      this.collections[name] = collection;
      return collection;
    },
    collection: function(name) {
      if (typeof this.collections[name] === 'undefined') {
        this.throwException(("Unable to find collection \"" + name + "\""));
      }
      return this.collections[name];
    },
    throwException: function(message) {
      throw ("Catwalk: " + message + ".");
    },
    on: function(name, eventFn) {
      this.events[name] = eventFn;
    },
    off: function(name) {
      delete this.events[name];
    }
  }, {});
  var Collection = function Collection(name, properties) {
    this.id = 0;
    this.name = name;
    this.models = [];
    this.silent = false;
    this.blueprint = new BlueprintModel(name, properties);
  };
  ($traceurRuntime.createClass)(Collection, {
    silently: function(silentFn) {
      this.silent = true;
      silentFn.apply(this);
      this.silent = false;
    },
    createModel: function() {
      var properties = arguments[0] !== (void 0) ? arguments[0] : {};
      var model = this.blueprint.iterateAll(properties);
      this.injectMeta(model);
      Object.seal(model);
      this.models.push(model);
      this.issuePromise('create', model, null);
      return model;
    },
    readModel: function(properties) {
      this.issuePromise('read', properties, null);
      return properties;
    },
    updateModel: function(model, properties) {
      var previousModel = {};
      Object.keys(model).forEach((function(property) {
        return previousModel[property] = model[property];
      }));
      try {
        Object.keys(properties).forEach((function(property) {
          return model[property] = properties[property];
        }));
      } catch (e) {}
      this.issuePromise('update', model, previousModel);
      return model;
    },
    deleteModel: function(model) {
      var $__0 = this;
      var remove = (function(model, index) {
        $__0.issuePromise('delete', null, model);
        $__0.models.splice(index, 1);
      });
      ((function() {
        var index = $__0.models.indexOf(model);
        if (index !== -1) {
          remove($__0.models[index], index);
        }
      }))();
      ((function() {
        var index = 0;
        $__0.models.forEach((function(currentModel) {
          if (currentModel[CATWALK_META_PROPERTY].id === model[CATWALK_META_PROPERTY].id) {
            remove(currentModel, index);
          }
          index++;
        }));
      }))();
      return model;
    },
    injectMeta: function(model) {
      model[CATWALK_META_PROPERTY] = {
        id: ++this.id,
        status: CATWALK_STATES_PROPERTIES.NEW
      };
    },
    issuePromise: function(eventName, currentModel, previousModel) {
      var $__0 = this;
      if (this.silent) {
        return;
      }
      if (typeof catwalk.events[eventName] !== 'function') {
        return;
      }
      new Promise((function(resolve, reject) {
        catwalk.events[eventName]($__0.name, $__0.cleanModel(currentModel || previousModel), {
          resolve: resolve,
          reject: reject
        });
      })).then((function(resolutionParams) {
        $__0.resolvePromise(eventName, currentModel, previousModel)(resolutionParams);
      }), (function(resolutionParams) {
        $__0.rejectPromise(eventName, currentModel, previousModel)(resolutionParams);
      }));
    },
    resolvePromise: function(eventName, currentModel, previousModel) {
      var $__0 = this;
      void(previousModel);
      if (currentModel && eventName === 'create') {
        currentModel[CATWALK_META_PROPERTY].status = CATWALK_STATES_PROPERTIES.SAVED;
      }
      if ((currentModel === null && previousModel) && eventName === 'delete') {
        previousModel[CATWALK_META_PROPERTY].status = CATWALK_STATES_PROPERTIES.DELETED;
      }
      return (function(properties) {
        $__0.silently((function() {
          if (properties && eventName !== 'read') {
            $__0.updateModel(currentModel, properties);
          }
          if (properties && !properties.hasOwnProperty(CATWALK_META_PROPERTY) && eventName === 'read') {
            var model = $__0.createModel(properties);
            $__0.updateModel(currentModel, model);
          }
        }));
        $__0.conditionallyEmitEvent();
      });
    },
    rejectPromise: function(eventName, currentModel, previousModel) {
      var $__0 = this;
      var rejectWith = (function(duplicateModel) {
        if (duplicateModel) {
          $__0.silently((function() {
            if (eventName === 'update' && duplicateModel.hasOwnProperty(CATWALK_META_PROPERTY)) {
              $__0.deleteModel(previousModel);
              previousModel[CATWALK_META_PROPERTY].status = CATWALK_STATES_PROPERTIES.DELETED;
            }
            $__0.updateModel(currentModel, duplicateModel);
            currentModel[CATWALK_META_PROPERTY].status = CATWALK_STATES_PROPERTIES.SAVED;
          }));
        }
        $__0.conditionallyEmitEvent();
      });
      if (previousModel === null && eventName === 'create') {
        this.silently((function() {
          $__0.deleteModel(currentModel);
          currentModel[CATWALK_META_PROPERTY].status = CATWALK_STATES_PROPERTIES.DELETED;
        }));
        return rejectWith;
      }
      if (currentModel === null && eventName === 'delete') {
        this.silently((function() {
          var model = $__0.updateModel({}, previousModel);
          $__0.models.push(model);
        }));
      }
      if ((currentModel && previousModel) && eventName === 'update') {
        this.silently((function() {
          $__0.updateModel(currentModel, previousModel);
        }));
        return rejectWith;
      }
      return rejectWith;
    },
    conditionallyEmitEvent: function() {
      if (typeof catwalk.events.refresh === 'function') {
        catwalk.events.refresh();
      }
    },
    cleanModel: function(model) {
      var cleanedModel = {};
      Object.keys(model).forEach((function(property) {
        if (property === CATWALK_META_PROPERTY) {
          return;
        }
        cleanedModel[property] = model[property];
      }));
      return cleanedModel;
    }
  }, {});
  var BlueprintModel = function BlueprintModel(name, blueprint) {
    this.name = name;
    this.model = Object.freeze(blueprint);
  };
  ($traceurRuntime.createClass)(BlueprintModel, {
    iterateAll: function(properties) {
      var model = this.iterateProperties(properties);
      return this.iterateBlueprint(model);
    },
    iterateProperties: function(properties) {
      var $__0 = this;
      var model = {};
      Object.keys(properties).forEach((function(property) {
        var value = properties[property],
            propertyHandler = $__0.model[property];
        if (typeof propertyHandler === 'undefined') {
          return;
        }
        if (propertyHandler instanceof RelationshipAbstract) {
          Object.defineProperty(model, property, propertyHandler.defineRelationship($__0.name, property));
          propertyHandler.setValues(properties[property]);
        }
        if (typeof propertyHandler === 'function') {
          value = propertyHandler(value);
        }
        model[property] = value;
      }));
      return model;
    },
    iterateBlueprint: function(model) {
      var $__0 = this;
      Object.keys(this.model).forEach((function(property) {
        if (typeof model[property] === 'undefined') {
          model[property] = $__0.model[property];
          if (typeof $__0.model[property] === 'function') {
            try {
              throw undefined;
            } catch (propertyHandler) {
              {
                propertyHandler = $__0.model[property];
                model[property] = propertyHandler();
              }
            }
          }
        }
      }));
      return model;
    }
  }, {});
  var Typecast = function Typecast() {};
  ($traceurRuntime.createClass)(Typecast, {
    string: function() {
      var defaultValue = arguments[0] !== (void 0) ? arguments[0] : '';
      return (function(value) {
        return String(value || defaultValue);
      });
    },
    number: function() {
      var defaultValue = arguments[0] !== (void 0) ? arguments[0] : 0;
      return (function(value) {
        return Number(value || defaultValue);
      });
    }
  }, {});
  var Relationship = function Relationship() {};
  ($traceurRuntime.createClass)(Relationship, {
    hasOne: function(foreignKey, collectionName) {
      return new RelationshipHasOne(foreignKey, collectionName);
    },
    hasMany: function(foreignKey, collectionName) {
      return new RelationshipHasMany(foreignKey, collectionName);
    }
  }, {});
  var RelationshipAbstract = function RelationshipAbstract(foreignKey, collectionName) {
    this.target = {
      collection: collectionName,
      key: foreignKey
    };
  };
  ($traceurRuntime.createClass)(RelationshipAbstract, {
    setValues: function(values) {
      this.values = this.value = values;
    },
    defineRelationship: function(collectionName, localKey, accessorFunctions) {
      this.source = {
        collection: collectionName,
        key: localKey
      };
      return {
        get: accessorFunctions.get,
        set: accessorFunctions.set
      };
    }
  }, {});
  var RelationshipHasMany = function RelationshipHasMany() {
    $traceurRuntime.defaultSuperCall(this, $RelationshipHasMany.prototype, arguments);
  };
  var $RelationshipHasMany = RelationshipHasMany;
  ($traceurRuntime.createClass)(RelationshipHasMany, {
    defineRelationship: function(collectionName, localKey) {
      return $traceurRuntime.superCall(this, $RelationshipHasMany.prototype, "defineRelationship", [collectionName, localKey, {
        get: this.getModels.bind(this),
        set: this.setModels.bind(this)
      }]);
    },
    getModels: function() {
      var $__0 = this;
      var loadModels = (function() {
        return foreignCollection.models.filter((function(foreignModel) {
          return $__0.values.indexOf(foreignModel[$__0.target.key]) !== -1;
        }));
      });
      var arrayDiff = (function(firstArray, secondArray) {
        return firstArray.filter(function(i) {
          return secondArray.indexOf(i) < 0;
        });
      });
      var foreignCollection = catwalk.collection(this.target.collection),
          models = loadModels();
      if (models.length !== this.values.length) {
        var loadedKeys = models.map((function(model) {
          return model[$__0.target.key];
        })),
            requiredKeys = arrayDiff(this.values, loadedKeys);
        requiredKeys.forEach((function(foreignKey) {
          var requiredModel = {};
          requiredModel[$__0.target.key] = foreignKey;
          foreignCollection.readModel(requiredModel);
        }));
        models = loadModels();
      }
      return models;
    },
    setModels: function(values) {
      this.values = values;
    }
  }, {}, RelationshipAbstract);
  var RelationshipHasOne = function RelationshipHasOne() {
    $traceurRuntime.defaultSuperCall(this, $RelationshipHasOne.prototype, arguments);
  };
  var $RelationshipHasOne = RelationshipHasOne;
  ($traceurRuntime.createClass)(RelationshipHasOne, {
    defineRelationship: function(collectionName, localKey) {
      return $traceurRuntime.superCall(this, $RelationshipHasOne.prototype, "defineRelationship", [collectionName, localKey, {
        get: this.getModel.bind(this),
        set: this.setModel.bind(this)
      }]);
    },
    getModel: function() {
      var $__0 = this;
      var loadModel = (function() {
        return foreignCollection.models.find((function(foreignModel) {
          return $__0.value === foreignModel[$__0.target.key];
        }));
      });
      var foreignCollection = catwalk.collection(this.target.collection),
          model = loadModel();
      if (!model) {
        var requiredModel = {};
        requiredModel[this.target.key] = this.value;
        foreignCollection.readModel(requiredModel);
        model = loadModel();
      }
      return model;
    },
    setModel: function(value) {
      this.value = value;
    }
  }, {}, RelationshipAbstract);
  $window.catwalk = new Catwalk();
})(window);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNhdHdhbGsuanMiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvMSIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci8yIiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzQiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvNiIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci81IiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxBQUFDLFNBQVMsT0FBTTtBQUVaLGFBQVcsQ0FBQztJQU1OLENBQUEscUJBQW9CLEVBQUksWUFBVTtJQU1sQyxDQUFBLHlCQUF3QixFQUFJO0FBQUUsTUFBRSxDQUFHLEVBQUE7QUFBRyxRQUFJLENBQUcsRUFBQTtBQUFHLFFBQUksQ0FBRyxFQUFBO0FBQUcsVUFBTSxDQUFHLEVBQUE7QUFBQSxFQUFFO0FDZC9FLEFBQUksSUFBQSxVRG1CQSxTQUFNLFFBQU0sQ0FNRyxBQUFDLENBQUU7QUFDVixPQUFHLE9BQU8sRUFBVSxHQUFDLENBQUM7QUFDdEIsT0FBRyxZQUFZLEVBQUssR0FBQyxDQUFDO0FBQ3RCLE9BQUcsYUFBYSxFQUFJLElBQUksYUFBVyxBQUFDLEVBQUMsQ0FBQztBQUN0QyxPQUFHLFNBQVMsRUFBUSxJQUFJLFNBQU8sQUFBQyxFQUFDLENBQUM7RUM3Qk4sQUQ4QmhDLENDOUJnQztBQ0F4QyxFQUFDLGVBQWMsWUFBWSxDQUFDLEFBQUM7QUZvQ3JCLG1CQUFlLENBQWYsVUFBaUIsSUFBRyxDQUFHLENBQUEsVUFBUyxDQUFHO0FBRS9CLEFBQUksUUFBQSxDQUFBLFVBQVMsRUFBSSxJQUFJLFdBQVMsQUFBQyxDQUFDLElBQUcsQ0FBRyxXQUFTLENBQUMsQ0FBQztBQUNqRCxTQUFHLFlBQVksQ0FBRSxJQUFHLENBQUMsRUFBSSxXQUFTLENBQUM7QUFDbkMsV0FB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QU8sQ0FBQSxVQUFTLElBQU0sQ0FBQSxZQUFXLENBQUUsV0FBVSxJQUFJLENBQUMsQ0FBQztRQUN2RCxFQUFDLENBQUM7TUFDTixDQUFBLENBQUM7QUFFRCxBQUFJLFFBQUEsQ0FBQSxpQkFBZ0IsRUFBSSxDQUFBLE9BQU0sV0FBVyxBQUFDLENBQUMsSUFBRyxPQUFPLFdBQVcsQ0FBQztBQUM3RCxjQUFJLEVBQWdCLENBQUEsU0FBUSxBQUFDLEVBQUMsQ0FBQztBQUVuQyxTQUFJLENBQUMsS0FBSSxDQUFHO0FBR1IsQUFBSSxVQUFBLENBQUEsYUFBWSxFQUFNLEdBQUMsQ0FBQztBQUN4QixvQkFBWSxDQUFFLElBQUcsT0FBTyxJQUFJLENBQUMsRUFBSSxDQUFBLElBQUcsTUFBTSxDQUFDO0FBQzNDLHdCQUFnQixVQUFVLEFBQUMsQ0FBQyxhQUFZLENBQUMsQ0FBQztBQUcxQyxZQUFJLEVBQUksQ0FBQSxTQUFRLEFBQUMsRUFBQyxDQUFDO01BRXZCO0FBQUEsQUFFQSxXQUFPLE1BQUksQ0FBQztJQUVoQjtBQU1BLFdBQU8sQ0FBUCxVQUFTLEtBQUksQ0FBRztBQUNaLFNBQUcsTUFBTSxFQUFJLE1BQUksQ0FBQztJQUN0QjtBQUFBLE9BMUQ2QixxQkFBbUIsQ0tyd0JBO0FMbzBCcEQsUUFBTSxRQUFRLEVBQUksSUFBSSxRQUFNLEFBQUMsRUFBQyxDQUFDO0FBRW5DLENBQUMsQUFBQyxDQUFDLE1BQUssQ0FBQyxDQUFDO0FBQUEiLCJmaWxlIjoiY2F0d2Fsay5lczUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oJHdpbmRvdykge1xuXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICAvKipcbiAgICAgKiBAY29uc3RhbnQgQ0FUV0FMS19NRVRBX1BST1BFUlRZXG4gICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgKi9cbiAgICBjb25zdCBDQVRXQUxLX01FVEFfUFJPUEVSVFkgPSAnX19jYXR3YWxrJztcblxuICAgIC8qKlxuICAgICAqIEBjb25zdGFudCBDQVRXQUxLX1NUQVRFX1BST1BFUlRJRVNcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuICAgIGNvbnN0IENBVFdBTEtfU1RBVEVTX1BST1BFUlRJRVMgPSB7IE5FVzogMSwgRElSVFk6IDIsIFNBVkVEOiA0LCBERUxFVEVEOiA4IH07XG5cbiAgICAvKipcbiAgICAgKiBAY2xhc3MgQ2F0d2Fsa1xuICAgICAqL1xuICAgIGNsYXNzIENhdHdhbGsge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICAgICogQHJldHVybiB7Q2F0d2Fsa31cbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAgICAgdGhpcy5ldmVudHMgICAgICAgPSB7fTtcbiAgICAgICAgICAgIHRoaXMuY29sbGVjdGlvbnMgID0ge307XG4gICAgICAgICAgICB0aGlzLnJlbGF0aW9uc2hpcCA9IG5ldyBSZWxhdGlvbnNoaXAoKTtcbiAgICAgICAgICAgIHRoaXMudHlwZWNhc3QgICAgID0gbmV3IFR5cGVjYXN0KCk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQG1ldGhvZCBjcmVhdGVDb2xsZWN0aW9uXG4gICAgICAgICAqIEByZXR1cm4ge0NvbGxlY3Rpb259XG4gICAgICAgICAqL1xuICAgICAgICBjcmVhdGVDb2xsZWN0aW9uKG5hbWUsIHByb3BlcnRpZXMpIHtcblxuICAgICAgICAgICAgdmFyIGNvbGxlY3Rpb24gPSBuZXcgQ29sbGVjdGlvbihuYW1lLCBwcm9wZXJ0aWVzKTtcbiAgICAgICAgICAgIHRoaXMuY29sbGVjdGlvbnNbbmFtZV0gPSBjb2xsZWN0aW9uO1xuICAgICAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG5cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWV0aG9kIGNvbGxlY3Rpb25cbiAgICAgICAgICogQHBhcmFtIG5hbWUge1N0cmluZ31cbiAgICAgICAgICogQHJldHVybiB7Q29sbGVjdGlvbn1cbiAgICAgICAgICovXG4gICAgICAgIGNvbGxlY3Rpb24obmFtZSkge1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuY29sbGVjdGlvbnNbbmFtZV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50aHJvd0V4Y2VwdGlvbihgVW5hYmxlIHRvIGZpbmQgY29sbGVjdGlvbiBcIiR7bmFtZX1cImApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb2xsZWN0aW9uc1tuYW1lXTtcblxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZXRob2QgdGhyb3dFeGNlcHRpb25cbiAgICAgICAgICogQHRocm93cyBFeGNlcHRpb25cbiAgICAgICAgICogQHBhcmFtIG1lc3NhZ2Uge1N0cmluZ31cbiAgICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAgICovXG4gICAgICAgIHRocm93RXhjZXB0aW9uKG1lc3NhZ2UpIHtcbiAgICAgICAgICAgIHRocm93IGBDYXR3YWxrOiAke21lc3NhZ2V9LmA7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQG1ldGhvZCBvblxuICAgICAgICAgKiBAcGFyYW0gbmFtZSB7U3RyaW5nfVxuICAgICAgICAgKiBAcGFyYW0gZXZlbnRGbiB7RnVuY3Rpb259XG4gICAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgICAqL1xuICAgICAgICBvbihuYW1lLCBldmVudEZuKSB7XG4gICAgICAgICAgICB0aGlzLmV2ZW50c1tuYW1lXSA9IGV2ZW50Rm47XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQG1ldGhvZCBvZmZcbiAgICAgICAgICogQHBhcmFtIG5hbWUge1N0cmluZ31cbiAgICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAgICovXG4gICAgICAgIG9mZihuYW1lKSB7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5ldmVudHNbbmFtZV07XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBjbGFzcyBDb2xsZWN0aW9uXG4gICAgICovXG4gICAgY2xhc3MgQ29sbGVjdGlvbiB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKiBAcGFyYW0gbmFtZSB7U3RyaW5nfVxuICAgICAgICAgKiBAcGFyYW0gcHJvcGVydGllcyB7T2JqZWN0fVxuICAgICAgICAgKiBAcmV0dXJuIHtDb2xsZWN0aW9ufVxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3RydWN0b3IobmFtZSwgcHJvcGVydGllcykge1xuICAgICAgICAgICAgdGhpcy5pZCAgICAgICAgPSAwO1xuICAgICAgICAgICAgdGhpcy5uYW1lICAgICAgPSBuYW1lO1xuICAgICAgICAgICAgdGhpcy5tb2RlbHMgICAgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuc2lsZW50ICAgID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmJsdWVwcmludCA9IG5ldyBCbHVlcHJpbnRNb2RlbChuYW1lLCBwcm9wZXJ0aWVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWV0aG9kIHNpbGVudGx5XG4gICAgICAgICAqIEBwYXJhbSBzaWxlbnRGbiB7RnVuY3Rpb259XG4gICAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgICAqL1xuICAgICAgICBzaWxlbnRseShzaWxlbnRGbikge1xuICAgICAgICAgICAgdGhpcy5zaWxlbnQgPSB0cnVlO1xuICAgICAgICAgICAgc2lsZW50Rm4uYXBwbHkodGhpcyk7XG4gICAgICAgICAgICB0aGlzLnNpbGVudCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZXRob2QgY3JlYXRlTW9kZWxcbiAgICAgICAgICogQHBhcmFtIFtwcm9wZXJ0aWVzPXt9XSB7T2JqZWN0fVxuICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAgICAgICAqL1xuICAgICAgICBjcmVhdGVNb2RlbChwcm9wZXJ0aWVzID0ge30pIHtcblxuICAgICAgICAgICAgLy8gRW5zdXJlIHRoZSBtb2RlbCBjb25mb3JtcyB0byB0aGUgYmx1ZXByaW50LlxuICAgICAgICAgICAgdmFyIG1vZGVsID0gdGhpcy5ibHVlcHJpbnQuaXRlcmF0ZUFsbChwcm9wZXJ0aWVzKTtcblxuICAgICAgICAgICAgdGhpcy5pbmplY3RNZXRhKG1vZGVsKTtcbiAgICAgICAgICAgIE9iamVjdC5zZWFsKG1vZGVsKTtcbiAgICAgICAgICAgIHRoaXMubW9kZWxzLnB1c2gobW9kZWwpO1xuICAgICAgICAgICAgdGhpcy5pc3N1ZVByb21pc2UoJ2NyZWF0ZScsIG1vZGVsLCBudWxsKTtcbiAgICAgICAgICAgIHJldHVybiBtb2RlbDtcblxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZXRob2QgcmVhZE1vZGVsXG4gICAgICAgICAqIEBwYXJhbSBwcm9wZXJ0aWVzIHtPYmplY3R9XG4gICAgICAgICAqIEByZXR1cm4ge09iamVjdH1cbiAgICAgICAgICovXG4gICAgICAgIHJlYWRNb2RlbChwcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICB0aGlzLmlzc3VlUHJvbWlzZSgncmVhZCcsIHByb3BlcnRpZXMsIG51bGwpO1xuICAgICAgICAgICAgcmV0dXJuIHByb3BlcnRpZXM7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQG1ldGhvZCB1cGRhdGVNb2RlbFxuICAgICAgICAgKiBAcGFyYW0gbW9kZWwge09iamVjdH1cbiAgICAgICAgICogQHBhcmFtIHByb3BlcnRpZXMge09iamVjdH1cbiAgICAgICAgICogQHJldHVybiB7T2JqZWN0fVxuICAgICAgICAgKi9cbiAgICAgICAgdXBkYXRlTW9kZWwobW9kZWwsIHByb3BlcnRpZXMpIHtcblxuICAgICAgICAgICAgLy8gQ3JlYXRlIGEgY29weSBvZiB0aGUgb2xkIG1vZGVsIGZvciByb2xsaW5nIGJhY2suXG4gICAgICAgICAgICB2YXIgcHJldmlvdXNNb2RlbCA9IHt9O1xuICAgICAgICAgICAgT2JqZWN0LmtleXMobW9kZWwpLmZvckVhY2gocHJvcGVydHkgPT4gcHJldmlvdXNNb2RlbFtwcm9wZXJ0eV0gPSBtb2RlbFtwcm9wZXJ0eV0pO1xuXG4gICAgICAgICAgICB0cnkge1xuXG4gICAgICAgICAgICAgICAgLy8gQ29weSBhY3Jvc3MgdGhlIGRhdGEgZnJvbSB0aGUgcHJvcGVydGllcy4gV2Ugd3JhcCB0aGUgYXNzaWdubWVudCBpbiBhIHRyeS1jYXRjaCBibG9ja1xuICAgICAgICAgICAgICAgIC8vIGJlY2F1c2UgaWYgdGhlIHVzZXIgaGFzIGFkZGVkIGFueSBhZGRpdGlvbmFsIHByb3BlcnRpZXMgdGhhdCBkb24ndCBiZWxvbmcgaW4gdGhlIG1vZGVsLFxuICAgICAgICAgICAgICAgIC8vIGFuIGV4Y2VwdGlvbiB3aWxsIGJlIHJhaXNlZCBiZWNhdXNlIHRoZSBvYmplY3QgaXMgc2VhbGVkLlxuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKHByb3BlcnRpZXMpLmZvckVhY2gocHJvcGVydHkgPT4gbW9kZWxbcHJvcGVydHldID0gcHJvcGVydGllc1twcm9wZXJ0eV0pO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge31cblxuICAgICAgICAgICAgdGhpcy5pc3N1ZVByb21pc2UoJ3VwZGF0ZScsIG1vZGVsLCBwcmV2aW91c01vZGVsKTtcbiAgICAgICAgICAgIHJldHVybiBtb2RlbDtcblxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZXRob2QgZGVsZXRlTW9kZWxcbiAgICAgICAgICogQHBhcmFtIG1vZGVsIHtPYmplY3R9XG4gICAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgICAqL1xuICAgICAgICBkZWxldGVNb2RlbChtb2RlbCkge1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEBtZXRob2QgcmVtb3ZlXG4gICAgICAgICAgICAgKiBAcGFyYW0gbW9kZWwge09iamVjdH1cbiAgICAgICAgICAgICAqIEBwYXJhbSBpbmRleCB7TnVtYmVyfVxuICAgICAgICAgICAgICogQHJldHVybiB7T2JqZWN0fVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgcmVtb3ZlID0gKG1vZGVsLCBpbmRleCkgPT4ge1xuXG4gICAgICAgICAgICAgICAgdGhpcy5pc3N1ZVByb21pc2UoJ2RlbGV0ZScsIG51bGwsIG1vZGVsKTtcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGVscy5zcGxpY2UoaW5kZXgsIDEpO1xuXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAoKCkgPT4ge1xuXG4gICAgICAgICAgICAgICAgLy8gVHJ5IHRvIGZpbmQgdGhlIG1vZGVsIGJ5IHJlZmVyZW5jZS5cbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLm1vZGVscy5pbmRleE9mKG1vZGVsKTtcblxuICAgICAgICAgICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlKHRoaXMubW9kZWxzW2luZGV4XSwgaW5kZXgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSkoKTtcblxuICAgICAgICAgICAgKCgpID0+IHtcblxuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IDA7XG5cbiAgICAgICAgICAgICAgICAvLyBUcnkgdG8gZmluZCB0aGUgbW9kZWwgYnkgaXRzIGludGVybmFsIENhdHdhbGsgSUQuXG4gICAgICAgICAgICAgICAgdGhpcy5tb2RlbHMuZm9yRWFjaCgoY3VycmVudE1vZGVsKSA9PiB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRNb2RlbFtDQVRXQUxLX01FVEFfUFJPUEVSVFldLmlkID09PSBtb2RlbFtDQVRXQUxLX01FVEFfUFJPUEVSVFldLmlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmUoY3VycmVudE1vZGVsLCBpbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpbmRleCsrO1xuXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH0pKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBtb2RlbDtcblxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZXRob2QgaW5qZWN0TWV0YVxuICAgICAgICAgKiBAcGFyYW0gbW9kZWwge09iamVjdH1cbiAgICAgICAgICogQHJldHVybiB7T2JqZWN0fVxuICAgICAgICAgKi9cbiAgICAgICAgaW5qZWN0TWV0YShtb2RlbCkge1xuXG4gICAgICAgICAgICBtb2RlbFtDQVRXQUxLX01FVEFfUFJPUEVSVFldID0ge1xuICAgICAgICAgICAgICAgIGlkOiArK3RoaXMuaWQsXG4gICAgICAgICAgICAgICAgc3RhdHVzOiBDQVRXQUxLX1NUQVRFU19QUk9QRVJUSUVTLk5FV1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQG1ldGhvZCBpc3N1ZVByb21pc2VcbiAgICAgICAgICogQHBhcmFtIGV2ZW50TmFtZSB7U3RyaW5nfVxuICAgICAgICAgKiBAcGFyYW0gY3VycmVudE1vZGVsIHtPYmplY3R9XG4gICAgICAgICAqIEBwYXJhbSBwcmV2aW91c01vZGVsIHtPYmplY3R9XG4gICAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgICAqL1xuICAgICAgICBpc3N1ZVByb21pc2UoZXZlbnROYW1lLCBjdXJyZW50TW9kZWwsIHByZXZpb3VzTW9kZWwpIHtcblxuICAgICAgICAgICAgaWYgKHRoaXMuc2lsZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNhdHdhbGsuZXZlbnRzW2V2ZW50TmFtZV0gIT09ICdmdW5jdGlvbicpIHtcblxuICAgICAgICAgICAgICAgIC8vIENhbGxiYWNrIGhhcyBub3QgYWN0dWFsbHkgYmVlbiBzZXQtdXAgYW5kIHRoZXJlZm9yZSBtb2RlbHMgd2lsbCBuZXZlciBiZVxuICAgICAgICAgICAgICAgIC8vIHBlcnNpc3RlZC5cbiAgICAgICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICAgICAgICAgICAgLy8gSXNzdWUgdGhlIHByb21pc2UgZm9yIGJhY2stZW5kIHBlcnNpc3RlbmNlIG9mIHRoZSBtb2RlbC5cbiAgICAgICAgICAgICAgICBjYXR3YWxrLmV2ZW50c1tldmVudE5hbWVdKHRoaXMubmFtZSwgdGhpcy5jbGVhbk1vZGVsKGN1cnJlbnRNb2RlbCB8fCBwcmV2aW91c01vZGVsKSwge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiByZXNvbHZlLCByZWplY3Q6IHJlamVjdFxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9KS50aGVuKChyZXNvbHV0aW9uUGFyYW1zKSA9PiB7XG5cbiAgICAgICAgICAgICAgICAvLyBQcm9taXNlIGhhcyBiZWVuIHJlc29sdmVkIVxuICAgICAgICAgICAgICAgIHRoaXMucmVzb2x2ZVByb21pc2UoZXZlbnROYW1lLCBjdXJyZW50TW9kZWwsIHByZXZpb3VzTW9kZWwpKHJlc29sdXRpb25QYXJhbXMpO1xuXG4gICAgICAgICAgICB9LCAocmVzb2x1dGlvblBhcmFtcykgPT4ge1xuXG4gICAgICAgICAgICAgICAgLy8gUHJvbWlzZSBoYXMgYmVlbiByZWplY3RlZCFcbiAgICAgICAgICAgICAgICB0aGlzLnJlamVjdFByb21pc2UoZXZlbnROYW1lLCBjdXJyZW50TW9kZWwsIHByZXZpb3VzTW9kZWwpKHJlc29sdXRpb25QYXJhbXMpO1xuXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZXRob2QgcmVzb2x2ZVByb21pc2VcbiAgICAgICAgICogQHBhcmFtIGV2ZW50TmFtZSB7U3RyaW5nfVxuICAgICAgICAgKiBAcGFyYW0gY3VycmVudE1vZGVsIHtPYmplY3R9XG4gICAgICAgICAqIEBwYXJhbSBwcmV2aW91c01vZGVsIHtPYmplY3R9XG4gICAgICAgICAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICAgICAgICAgKi9cbiAgICAgICAgcmVzb2x2ZVByb21pc2UoZXZlbnROYW1lLCBjdXJyZW50TW9kZWwsIHByZXZpb3VzTW9kZWwpIHtcblxuICAgICAgICAgICAgLy8gQ3VycmVudGx5IHVudXNlZCBwcm9wZXJ0aWVzLlxuICAgICAgICAgICAgdm9pZChwcmV2aW91c01vZGVsKTtcblxuICAgICAgICAgICAgLy8gV2hlbiB3ZSdyZSBpbiB0aGUgcHJvY2VzcyBvZiBkZWxldGluZyBhIG1vZGVsLCB0aGUgYGN1cnJlbnRNb2RlbGAgaXMgdW5zZXQ7IGluc3RlYWQgdGhlXG4gICAgICAgICAgICAvLyBgcHJldmlvdXNNb2RlbGAgd2lsbCBiZSBkZWZpbmVkLlxuICAgICAgICAgICAgaWYgKGN1cnJlbnRNb2RlbCAmJiBldmVudE5hbWUgPT09ICdjcmVhdGUnKSB7XG5cbiAgICAgICAgICAgICAgICAvLyBNb2RlbCBoYXMgYmVlbiBzdWNjZXNzZnVsbHkgcGVyc2lzdGVkIVxuICAgICAgICAgICAgICAgIGN1cnJlbnRNb2RlbFtDQVRXQUxLX01FVEFfUFJPUEVSVFldLnN0YXR1cyA9IENBVFdBTEtfU1RBVEVTX1BST1BFUlRJRVMuU0FWRUQ7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKChjdXJyZW50TW9kZWwgPT09IG51bGwgJiYgcHJldmlvdXNNb2RlbCkgJiYgZXZlbnROYW1lID09PSAnZGVsZXRlJykge1xuXG4gICAgICAgICAgICAgICAgLy8gTW9kZWwgaGFzIGJlZW4gc3VjY2Vzc2Z1bGx5IGRlbGV0ZWQhXG4gICAgICAgICAgICAgICAgcHJldmlvdXNNb2RlbFtDQVRXQUxLX01FVEFfUFJPUEVSVFldLnN0YXR1cyA9IENBVFdBTEtfU1RBVEVTX1BST1BFUlRJRVMuREVMRVRFRDtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gKHByb3BlcnRpZXMpID0+IHtcblxuICAgICAgICAgICAgICAgIHRoaXMuc2lsZW50bHkoKCkgPT4ge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0aWVzICYmIGV2ZW50TmFtZSAhPT0gJ3JlYWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZU1vZGVsKGN1cnJlbnRNb2RlbCwgcHJvcGVydGllcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAocHJvcGVydGllcyAmJiAhcHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShDQVRXQUxLX01FVEFfUFJPUEVSVFkpICYmIGV2ZW50TmFtZSA9PT0gJ3JlYWQnKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtb2RlbCA9IHRoaXMuY3JlYXRlTW9kZWwocHJvcGVydGllcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgbW9kZWwgdG8gcmVmbGVjdCB0aGUgY2hhbmdlcyBvbiB0aGUgb2JqZWN0IHRoYXQgYHJlYWRNb2RlbGAgcmV0dXJuLlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVNb2RlbChjdXJyZW50TW9kZWwsIG1vZGVsKTtcblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHRoaXMuY29uZGl0aW9uYWxseUVtaXRFdmVudCgpO1xuXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQG1ldGhvZCByZWplY3RQcm9taXNlXG4gICAgICAgICAqIEBwYXJhbSBldmVudE5hbWUge1N0cmluZ30gLSBFdmVudCBuYW1lIGlzIGFjdHVhbGx5IG5vdCByZXF1aXJlZCwgYmVjYXVzZSB3ZSBjYW4gZGVkdWNlIHRoZSBzdWJzZXF1ZW50IGFjdGlvblxuICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSB0aGUgc3RhdGUgb2YgdGhlIGBjdXJyZW50TW9kZWxgIGFuZCBgcHJldmlvdXNNb2RlbGAsIGJ1dCB3ZSBhZGQgaXQgdG8gYWRkXG4gICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFyaWZpY2F0aW9uIHRvIG91ciBsb2dpY2FsIHN0ZXBzLlxuICAgICAgICAgKiBAcGFyYW0gY3VycmVudE1vZGVsIHtPYmplY3R9XG4gICAgICAgICAqIEBwYXJhbSBwcmV2aW91c01vZGVsIHtPYmplY3R9XG4gICAgICAgICAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICAgICAgICAgKi9cbiAgICAgICAgcmVqZWN0UHJvbWlzZShldmVudE5hbWUsIGN1cnJlbnRNb2RlbCwgcHJldmlvdXNNb2RlbCkge1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEBtZXRob2QgcmVqZWN0V2l0aFxuICAgICAgICAgICAgICogQHBhcmFtIGR1cGxpY2F0ZU1vZGVsIHtPYmplY3R9XG4gICAgICAgICAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgcmVqZWN0V2l0aCA9IChkdXBsaWNhdGVNb2RlbCkgPT4ge1xuXG4gICAgICAgICAgICAgICAgaWYgKGR1cGxpY2F0ZU1vZGVsKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaWxlbnRseSgoKSA9PiB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudE5hbWUgPT09ICd1cGRhdGUnICYmIGR1cGxpY2F0ZU1vZGVsLmhhc093blByb3BlcnR5KENBVFdBTEtfTUVUQV9QUk9QRVJUWSkpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVzZXIgcGFzc2VkIGluIGEgbW9kZWwgYW5kIHRoZXJlZm9yZSB0aGUgcHJldmlvdXMgc2hvdWxkIGJlIGRlbGV0ZWQsIGJ1dCBvbmx5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2hlbiB3ZSdyZSB1cGRhdGluZyFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRlbGV0ZU1vZGVsKHByZXZpb3VzTW9kZWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzTW9kZWxbQ0FUV0FMS19NRVRBX1BST1BFUlRZXS5zdGF0dXMgPSBDQVRXQUxLX1NUQVRFU19QUk9QRVJUSUVTLkRFTEVURUQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVXNlIHRoZSBkdXBsaWNhdGUgbW9kZWwgYXMgdGhlIHJlZmVyZW5jZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlTW9kZWwoY3VycmVudE1vZGVsLCBkdXBsaWNhdGVNb2RlbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50TW9kZWxbQ0FUV0FMS19NRVRBX1BST1BFUlRZXS5zdGF0dXMgPSBDQVRXQUxLX1NUQVRFU19QUk9QRVJUSUVTLlNBVkVEO1xuXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5jb25kaXRpb25hbGx5RW1pdEV2ZW50KCk7XG5cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGlmIChwcmV2aW91c01vZGVsID09PSBudWxsICYmIGV2ZW50TmFtZSA9PT0gJ2NyZWF0ZScpIHtcblxuICAgICAgICAgICAgICAgIHRoaXMuc2lsZW50bHkoKCkgPT4ge1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFByZXZpb3VzIG1vZGVsIHdhcyBhY3R1YWxseSBOVUxMIGFuZCB0aGVyZWZvcmUgd2UnbGwgZGVsZXRlIGl0LlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRlbGV0ZU1vZGVsKGN1cnJlbnRNb2RlbCk7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRNb2RlbFtDQVRXQUxLX01FVEFfUFJPUEVSVFldLnN0YXR1cyA9IENBVFdBTEtfU1RBVEVTX1BST1BFUlRJRVMuREVMRVRFRDtcblxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdFdpdGg7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGN1cnJlbnRNb2RlbCA9PT0gbnVsbCAmJiBldmVudE5hbWUgPT09ICdkZWxldGUnICkge1xuXG4gICAgICAgICAgICAgICAgdGhpcy5zaWxlbnRseSgoKSA9PiB7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gRGV2ZWxvcGVyIGRvZXNuJ3QgYWN0dWFsbHkgd2FudCB0byBkZWxldGUgdGhlIG1vZGVsLCBhbmQgdGhlcmVmb3JlIHdlIG5lZWQgdG8gcmV2ZXJ0IGl0IHRvXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSBtb2RlbCBpdCB3YXMsIGFuZCBzZXQgaXRzIGZsYWcgYmFjayB0byB3aGF0IGl0IHdhcy5cbiAgICAgICAgICAgICAgICAgICAgdmFyIG1vZGVsID0gdGhpcy51cGRhdGVNb2RlbCh7fSwgcHJldmlvdXNNb2RlbCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW9kZWxzLnB1c2gobW9kZWwpO1xuXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKChjdXJyZW50TW9kZWwgJiYgcHJldmlvdXNNb2RlbCkgJiYgZXZlbnROYW1lID09PSAndXBkYXRlJykge1xuXG4gICAgICAgICAgICAgICAgdGhpcy5zaWxlbnRseSgoKSA9PiB7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQm90aCBvZiB0aGUgY3VycmVudCBhbmQgcHJldmlvdXMgbW9kZWxzIGFyZSB1cGRhdGVkLCBhbmQgdGhlcmVmb3JlIHdlJ2xsIHNpbXBseVxuICAgICAgICAgICAgICAgICAgICAvLyByZXZlcnQgdGhlIGN1cnJlbnQgbW9kZWwgdG8gdGhlIHByZXZpb3VzIG1vZGVsLlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZU1vZGVsKGN1cnJlbnRNb2RlbCwgcHJldmlvdXNNb2RlbCk7XG5cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiByZWplY3RXaXRoO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiByZWplY3RXaXRoO1xuXG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQG1ldGhvZCBjb25kaXRpb25hbGx5RW1pdEV2ZW50XG4gICAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgICAqL1xuICAgICAgICBjb25kaXRpb25hbGx5RW1pdEV2ZW50KCkge1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNhdHdhbGsuZXZlbnRzLnJlZnJlc2ggPT09ICdmdW5jdGlvbicpIHtcblxuICAgICAgICAgICAgICAgIC8vIFdlJ3JlIGFsbCBkb25lIVxuICAgICAgICAgICAgICAgIGNhdHdhbGsuZXZlbnRzLnJlZnJlc2goKTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQG1ldGhvZCBjbGVhbk1vZGVsXG4gICAgICAgICAqIEBwYXJhbSBtb2RlbCB7T2JqZWN0fVxuICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAgICAgICAqL1xuICAgICAgICBjbGVhbk1vZGVsKG1vZGVsKSB7XG5cbiAgICAgICAgICAgIHZhciBjbGVhbmVkTW9kZWwgPSB7fTtcblxuICAgICAgICAgICAgT2JqZWN0LmtleXMobW9kZWwpLmZvckVhY2gocHJvcGVydHkgPT4ge1xuXG4gICAgICAgICAgICAgICAgaWYgKHByb3BlcnR5ID09PSBDQVRXQUxLX01FVEFfUFJPUEVSVFkpIHtcblxuICAgICAgICAgICAgICAgICAgICAvLyBDYXR3YWxrIG1ldGEgZGF0YSBzaG91bGQgbmV2ZXIgYmUgcGVyc2lzdGVkLlxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjbGVhbmVkTW9kZWxbcHJvcGVydHldID0gbW9kZWxbcHJvcGVydHldO1xuXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIGNsZWFuZWRNb2RlbDtcblxuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAY2xhc3MgQmx1ZXByaW50TW9kZWxcbiAgICAgKi9cbiAgICBjbGFzcyBCbHVlcHJpbnRNb2RlbCB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKiBAcGFyYW0gbmFtZSB7U3RyaW5nfVxuICAgICAgICAgKiBAcGFyYW0gYmx1ZXByaW50IHtPYmplY3R9XG4gICAgICAgICAqIEByZXR1cm4ge0JsdWVwcmludE1vZGVsfVxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3RydWN0b3IobmFtZSwgYmx1ZXByaW50KSB7XG4gICAgICAgICAgICB0aGlzLm5hbWUgID0gbmFtZTtcbiAgICAgICAgICAgIHRoaXMubW9kZWwgPSBPYmplY3QuZnJlZXplKGJsdWVwcmludCk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29udmVuaWVuY2UgbWV0aG9kIHRoYXQgd3JhcHMgYGl0ZXJhdGVQcm9wZXJ0aWVzYCBhbmQgYGl0ZXJhdGVCbHVlcHJpbnRgIGludG8gYSBvbmUtbGluZXIuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZXRob2QgaXRlcmF0ZUFsbFxuICAgICAgICAgKiBAcGFyYW0gcHJvcGVydGllcyB7T2JqZWN0fVxuICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAgICAgICAqL1xuICAgICAgICBpdGVyYXRlQWxsKHByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgIHZhciBtb2RlbCA9IHRoaXMuaXRlcmF0ZVByb3BlcnRpZXMocHJvcGVydGllcyk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pdGVyYXRlQmx1ZXByaW50KG1vZGVsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXNwb25zaWJsZSBmb3IgaXRlcmF0aW5nIG92ZXIgdGhlIHBhc3NlZCBpbiBtb2RlbCBwcm9wZXJ0aWVzIHRvIGVuc3VyZSB0aGV5J3JlIGluIHRoZSBibHVlcHJpbnQsXG4gICAgICAgICAqIGFuZCB0eXBlY2FzdGluZyB0aGUgcHJvcGVydGllcyBiYXNlZCBvbiB0aGUgZGVmaW5lIGJsdWVwcmludCBmb3IgdGhlIGN1cnJlbnQgY29sbGVjdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1ldGhvZCBpdGVyYXRlUHJvcGVydGllc1xuICAgICAgICAgKiBAcGFyYW0gcHJvcGVydGllcyB7T2JqZWN0fVxuICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAgICAgICAqL1xuICAgICAgICBpdGVyYXRlUHJvcGVydGllcyhwcm9wZXJ0aWVzKSB7XG5cbiAgICAgICAgICAgIHZhciBtb2RlbCA9IHt9O1xuXG4gICAgICAgICAgICBPYmplY3Qua2V5cyhwcm9wZXJ0aWVzKS5mb3JFYWNoKHByb3BlcnR5ID0+IHtcblxuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSAgICAgICAgICAgPSBwcm9wZXJ0aWVzW3Byb3BlcnR5XSxcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlIYW5kbGVyID0gdGhpcy5tb2RlbFtwcm9wZXJ0eV07XG5cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHByb3BlcnR5SGFuZGxlciA9PT0gJ3VuZGVmaW5lZCcpIHtcblxuICAgICAgICAgICAgICAgICAgICAvLyBQcm9wZXJ0eSBkb2Vzbid0IGJlbG9uZyBpbiB0aGUgbW9kZWwgYmVjYXVzZSBpdCdzIG5vdCBpbiB0aGUgYmx1ZXByaW50LlxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAocHJvcGVydHlIYW5kbGVyIGluc3RhbmNlb2YgUmVsYXRpb25zaGlwQWJzdHJhY3QpIHtcblxuICAgICAgICAgICAgICAgICAgICAvLyBQcm9wZXJ0eSBpcyBhY3R1YWxseSBhIHJlbGF0aW9uc2hpcCB0byBhbm90aGVyIGNvbGxlY3Rpb24uXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2RlbCwgcHJvcGVydHksIHByb3BlcnR5SGFuZGxlci5kZWZpbmVSZWxhdGlvbnNoaXAodGhpcy5uYW1lLCBwcm9wZXJ0eSkpO1xuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eUhhbmRsZXIuc2V0VmFsdWVzKHByb3BlcnRpZXNbcHJvcGVydHldKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcHJvcGVydHlIYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gVHlwZWNhc3QgcHJvcGVydHkgdG8gdGhlIGRlZmluZWQgdHlwZS5cbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBwcm9wZXJ0eUhhbmRsZXIodmFsdWUpO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbW9kZWxbcHJvcGVydHldID0gdmFsdWU7XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gbW9kZWw7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXNwb25zaWJsZSBmb3IgaXRlcmF0aW5nIG92ZXIgdGhlIGJsdWVwcmludCB0byBkZXRlcm1pbmUgaWYgYW55IHByb3BlcnRpZXMgYXJlIG1pc3NpbmdcbiAgICAgICAgICogZnJvbSB0aGUgY3VycmVudCBtb2RlbCwgdGhhdCBoYXZlIGJlZW4gZGVmaW5lZCBpbiB0aGUgYmx1ZXByaW50IGFuZCB0aGVyZWZvcmUgc2hvdWxkIGJlXG4gICAgICAgICAqIHByZXNlbnQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZXRob2QgaXRlcmF0ZUJsdWVwcmludFxuICAgICAgICAgKiBAcGFyYW0gbW9kZWwge09iamVjdH1cbiAgICAgICAgICogQHJldHVybiB7T2JqZWN0fVxuICAgICAgICAgKi9cbiAgICAgICAgaXRlcmF0ZUJsdWVwcmludChtb2RlbCkge1xuXG4gICAgICAgICAgICBPYmplY3Qua2V5cyh0aGlzLm1vZGVsKS5mb3JFYWNoKHByb3BlcnR5ID0+IHtcblxuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtb2RlbFtwcm9wZXJ0eV0gPT09ICd1bmRlZmluZWQnKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gRW5zdXJlIHRoYXQgaXQgaXMgZGVmaW5lZC5cbiAgICAgICAgICAgICAgICAgICAgbW9kZWxbcHJvcGVydHldID0gdGhpcy5tb2RlbFtwcm9wZXJ0eV07XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm1vZGVsW3Byb3BlcnR5XSA9PT0gJ2Z1bmN0aW9uJykge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBEZXRlcm1pbmUgaWYgdGhlIHByb3BlcnR5IGhhcyBhIHByb3BlcnR5IGhhbmRsZXIgbWV0aG9kIHdoaWNoIHdvdWxkIGJlIHJlc3BvbnNpYmxlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBmb3IgdHlwZWNhc3RpbmcsIGFuZCBkZXRlcm1pbmluZyB0aGUgZGVmYXVsdCB2YWx1ZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwcm9wZXJ0eUhhbmRsZXIgPSB0aGlzLm1vZGVsW3Byb3BlcnR5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsW3Byb3BlcnR5XSAgICAgPSBwcm9wZXJ0eUhhbmRsZXIoKTtcblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gbW9kZWw7XG5cbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGNsYXNzIFR5cGVjYXN0XG4gICAgICovXG4gICAgY2xhc3MgVHlwZWNhc3Qge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWV0aG9kIHN0cmluZ1xuICAgICAgICAgKiBAcGFyYW0gZGVmYXVsdFZhbHVlIHtTdHJpbmd9XG4gICAgICAgICAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICAgICAgICAgKi9cbiAgICAgICAgc3RyaW5nKGRlZmF1bHRWYWx1ZSA9ICcnKSB7XG5cbiAgICAgICAgICAgIHJldHVybiAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gU3RyaW5nKHZhbHVlIHx8IGRlZmF1bHRWYWx1ZSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQG1ldGhvZCBudW1iZXJcbiAgICAgICAgICogQHBhcmFtIGRlZmF1bHRWYWx1ZSB7TnVtYmVyfVxuICAgICAgICAgKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAgICAgICAgICovXG4gICAgICAgIG51bWJlcihkZWZhdWx0VmFsdWUgPSAwKSB7XG5cbiAgICAgICAgICAgIHJldHVybiAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gTnVtYmVyKHZhbHVlIHx8IGRlZmF1bHRWYWx1ZSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBjbGFzcyBSZWxhdGlvbnNoaXBcbiAgICAgKi9cbiAgICBjbGFzcyBSZWxhdGlvbnNoaXAge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWV0aG9kIGhhc09uZVxuICAgICAgICAgKiBAcGFyYW0gZm9yZWlnbktleSB7U3RyaW5nfVxuICAgICAgICAgKiBAcGFyYW0gY29sbGVjdGlvbk5hbWUge1N0cmluZ31cbiAgICAgICAgICogQHJldHVybiB7UmVsYXRpb25zaGlwSGFzT25lfVxuICAgICAgICAgKi9cbiAgICAgICAgaGFzT25lKGZvcmVpZ25LZXksIGNvbGxlY3Rpb25OYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFJlbGF0aW9uc2hpcEhhc09uZShmb3JlaWduS2V5LCBjb2xsZWN0aW9uTmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQG1ldGhvZCBoYXNNYW55XG4gICAgICAgICAqIEBwYXJhbSBmb3JlaWduS2V5IHtTdHJpbmd9XG4gICAgICAgICAqIEBwYXJhbSBjb2xsZWN0aW9uTmFtZSB7U3RyaW5nfVxuICAgICAgICAgKiBAcmV0dXJuIHtSZWxhdGlvbnNoaXBIYXNNYW55fVxuICAgICAgICAgKi9cbiAgICAgICAgaGFzTWFueShmb3JlaWduS2V5LCBjb2xsZWN0aW9uTmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWxhdGlvbnNoaXBIYXNNYW55KGZvcmVpZ25LZXksIGNvbGxlY3Rpb25OYW1lKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGNsYXNzIFJlbGF0aW9uc2hpcEFic3RyYWN0XG4gICAgICovXG4gICAgY2xhc3MgUmVsYXRpb25zaGlwQWJzdHJhY3Qge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICAgICogQHBhcmFtIGZvcmVpZ25LZXkge1N0cmluZ31cbiAgICAgICAgICogQHBhcmFtIGNvbGxlY3Rpb25OYW1lIHtTdHJpbmd9XG4gICAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgICAqL1xuICAgICAgICBjb25zdHJ1Y3Rvcihmb3JlaWduS2V5LCBjb2xsZWN0aW9uTmFtZSkge1xuXG4gICAgICAgICAgICB0aGlzLnRhcmdldCA9IHtcbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uOiBjb2xsZWN0aW9uTmFtZSxcbiAgICAgICAgICAgICAgICBrZXk6IGZvcmVpZ25LZXlcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWV0aG9kIHNldFZhbHVlc1xuICAgICAgICAgKiBAcGFyYW0gbW9kZWwge09iamVjdH1cbiAgICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAgICovXG4gICAgICAgIHNldFZhbHVlcyh2YWx1ZXMpIHtcbiAgICAgICAgICAgIHRoaXMudmFsdWVzID0gdGhpcy52YWx1ZSA9IHZhbHVlcztcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWV0aG9kIGRlZmluZVJlbGF0aW9uc2hpcFxuICAgICAgICAgKiBAcGFyYW0gY29sbGVjdGlvbk5hbWUge1N0cmluZ31cbiAgICAgICAgICogQHBhcmFtIGxvY2FsS2V5IHtTdHJpbmd9XG4gICAgICAgICAqIEBwYXJhbSBhY2Nlc3NvckZ1bmN0aW9ucyB7RnVuY3Rpb259XG4gICAgICAgICAqIEByZXR1cm4ge09iamVjdH1cbiAgICAgICAgICovXG4gICAgICAgIGRlZmluZVJlbGF0aW9uc2hpcChjb2xsZWN0aW9uTmFtZSwgbG9jYWxLZXksIGFjY2Vzc29yRnVuY3Rpb25zKSB7XG5cbiAgICAgICAgICAgIHRoaXMuc291cmNlID0ge1xuICAgICAgICAgICAgICAgIGNvbGxlY3Rpb246IGNvbGxlY3Rpb25OYW1lLFxuICAgICAgICAgICAgICAgIGtleTogbG9jYWxLZXlcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZ2V0OiBhY2Nlc3NvckZ1bmN0aW9ucy5nZXQsXG4gICAgICAgICAgICAgICAgc2V0OiBhY2Nlc3NvckZ1bmN0aW9ucy5zZXRcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAY2xhc3MgUmVsYXRpb25zaGlwSGFzTWFueVxuICAgICAqL1xuICAgIGNsYXNzIFJlbGF0aW9uc2hpcEhhc01hbnkgZXh0ZW5kcyBSZWxhdGlvbnNoaXBBYnN0cmFjdCB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZXRob2QgZGVmaW5lUmVsYXRpb25zaGlwXG4gICAgICAgICAqIEBwYXJhbSBjb2xsZWN0aW9uTmFtZSB7U3RyaW5nfVxuICAgICAgICAgKiBAcGFyYW0gbG9jYWxLZXkge1N0cmluZ31cbiAgICAgICAgICogQHJldHVybiB7T2JqZWN0fVxuICAgICAgICAgKi9cbiAgICAgICAgZGVmaW5lUmVsYXRpb25zaGlwKGNvbGxlY3Rpb25OYW1lLCBsb2NhbEtleSkge1xuXG4gICAgICAgICAgICByZXR1cm4gc3VwZXIoY29sbGVjdGlvbk5hbWUsIGxvY2FsS2V5LCB7XG4gICAgICAgICAgICAgICAgZ2V0OiB0aGlzLmdldE1vZGVscy5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgICAgIHNldDogdGhpcy5zZXRNb2RlbHMuYmluZCh0aGlzKVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWV0aG9kIGdldE1vZGVsc1xuICAgICAgICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICAgICAgICovXG4gICAgICAgIGdldE1vZGVscygpIHtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBAbWV0aG9kIGxvYWRNb2RlbHNcbiAgICAgICAgICAgICAqIEByZXR1cm4ge0FycmF5fVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgbG9hZE1vZGVscyA9ICgpID0+IHtcblxuICAgICAgICAgICAgICAgIHJldHVybiBmb3JlaWduQ29sbGVjdGlvbi5tb2RlbHMuZmlsdGVyKChmb3JlaWduTW9kZWwpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVzLmluZGV4T2YoZm9yZWlnbk1vZGVsW3RoaXMudGFyZ2V0LmtleV0pICE9PSAtMTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdmFyIGFycmF5RGlmZiA9IChmaXJzdEFycmF5LCBzZWNvbmRBcnJheSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBmaXJzdEFycmF5LmZpbHRlcihmdW5jdGlvbihpKSB7cmV0dXJuIHNlY29uZEFycmF5LmluZGV4T2YoaSkgPCAwO30pO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdmFyIGZvcmVpZ25Db2xsZWN0aW9uID0gY2F0d2Fsay5jb2xsZWN0aW9uKHRoaXMudGFyZ2V0LmNvbGxlY3Rpb24pLFxuICAgICAgICAgICAgICAgIG1vZGVscyAgICAgICAgICAgID0gbG9hZE1vZGVscygpO1xuXG4gICAgICAgICAgICAvLyBJZiB0aGVyZSBpcyBhIGRpc2NyZXBhbmN5IGJldHdlZW4gdGhlIGNvdW50cywgdGhlbiB3ZSBrbm93IGFsbCB0aGUgbW9kZWxzIGhhdmVuJ3QgYmVlbiBsb2FkZWQuXG4gICAgICAgICAgICBpZiAobW9kZWxzLmxlbmd0aCAhPT0gdGhpcy52YWx1ZXMubGVuZ3RoKSB7XG5cbiAgICAgICAgICAgICAgICAvLyBEaXNjb3ZlciB0aGUga2V5cyB0aGF0IGFyZSBjdXJyZW50bHkgbm90IGxvYWRlZC5cbiAgICAgICAgICAgICAgICB2YXIgbG9hZGVkS2V5cyAgID0gbW9kZWxzLm1hcChtb2RlbCA9PiBtb2RlbFt0aGlzLnRhcmdldC5rZXldKSxcbiAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWRLZXlzID0gYXJyYXlEaWZmKHRoaXMudmFsdWVzLCBsb2FkZWRLZXlzKTtcblxuICAgICAgICAgICAgICAgIHJlcXVpcmVkS2V5cy5mb3JFYWNoKChmb3JlaWduS2V5KSA9PiB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlcXVpcmVkTW9kZWwgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWRNb2RlbFt0aGlzLnRhcmdldC5rZXldID0gZm9yZWlnbktleTtcbiAgICAgICAgICAgICAgICAgICAgZm9yZWlnbkNvbGxlY3Rpb24ucmVhZE1vZGVsKHJlcXVpcmVkTW9kZWwpO1xuXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvLyBBdHRlbXB0IHRvIHJlYWQgdGhlIG1vZGVscyBhZ2FpbiBpbW1lZGlhdGVseS5cbiAgICAgICAgICAgICAgICBtb2RlbHMgPSBsb2FkTW9kZWxzKCk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG1vZGVscztcblxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZXRob2Qgc2V0TW9kZWxzXG4gICAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgICAqL1xuICAgICAgICBzZXRNb2RlbHModmFsdWVzKSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlcyA9IHZhbHVlcztcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGNsYXNzIFJlbGF0aW9uc2hpcEhhc09uZVxuICAgICAqL1xuICAgIGNsYXNzIFJlbGF0aW9uc2hpcEhhc09uZSBleHRlbmRzIFJlbGF0aW9uc2hpcEFic3RyYWN0IHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQG1ldGhvZCBkZWZpbmVSZWxhdGlvbnNoaXBcbiAgICAgICAgICogQHBhcmFtIGNvbGxlY3Rpb25OYW1lIHtTdHJpbmd9XG4gICAgICAgICAqIEBwYXJhbSBsb2NhbEtleSB7U3RyaW5nfVxuICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAgICAgICAqL1xuICAgICAgICBkZWZpbmVSZWxhdGlvbnNoaXAoY29sbGVjdGlvbk5hbWUsIGxvY2FsS2V5KSB7XG5cbiAgICAgICAgICAgIHJldHVybiBzdXBlcihjb2xsZWN0aW9uTmFtZSwgbG9jYWxLZXksIHtcbiAgICAgICAgICAgICAgICBnZXQ6IHRoaXMuZ2V0TW9kZWwuYmluZCh0aGlzKSxcbiAgICAgICAgICAgICAgICBzZXQ6IHRoaXMuc2V0TW9kZWwuYmluZCh0aGlzKVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWV0aG9kIGdldE1vZGVsXG4gICAgICAgICAqIEByZXR1cm4ge0FycmF5fVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0TW9kZWwoKSB7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQG1ldGhvZCBsb2FkTW9kZWxcbiAgICAgICAgICAgICAqIEByZXR1cm4ge09iamVjdH1cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmFyIGxvYWRNb2RlbCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZm9yZWlnbkNvbGxlY3Rpb24ubW9kZWxzLmZpbmQoKGZvcmVpZ25Nb2RlbCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZSA9PT0gZm9yZWlnbk1vZGVsW3RoaXMudGFyZ2V0LmtleV07XG4gICAgICAgICAgICAgICAgfSk7ICBcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHZhciBmb3JlaWduQ29sbGVjdGlvbiA9IGNhdHdhbGsuY29sbGVjdGlvbih0aGlzLnRhcmdldC5jb2xsZWN0aW9uKSxcbiAgICAgICAgICAgICAgICBtb2RlbCAgICAgICAgICAgICA9IGxvYWRNb2RlbCgpO1xuXG4gICAgICAgICAgICBpZiAoIW1vZGVsKSB7XG5cbiAgICAgICAgICAgICAgICAvLyBNb2RlbCBjYW5ub3QgYmUgZm91bmQgYW5kIHRoZXJlZm9yZSB3ZSdsbCBhdHRlbXB0IHRvIHJlYWQgdGhlIG1vZGVsIGludG8gdGhlIGNvbGxlY3Rpb24uXG4gICAgICAgICAgICAgICAgdmFyIHJlcXVpcmVkTW9kZWwgICA9IHt9O1xuICAgICAgICAgICAgICAgIHJlcXVpcmVkTW9kZWxbdGhpcy50YXJnZXQua2V5XSA9IHRoaXMudmFsdWU7XG4gICAgICAgICAgICAgICAgZm9yZWlnbkNvbGxlY3Rpb24ucmVhZE1vZGVsKHJlcXVpcmVkTW9kZWwpO1xuXG4gICAgICAgICAgICAgICAgLy8gQXR0ZW1wdCB0byByZWFkIHRoZSBtb2RlbCBhZ2FpbiBpbW1lZGlhdGVseS5cbiAgICAgICAgICAgICAgICBtb2RlbCA9IGxvYWRNb2RlbCgpO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBtb2RlbDtcblxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZXRob2Qgc2V0TW9kZWxcbiAgICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAgICovXG4gICAgICAgIHNldE1vZGVsKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIC8vIEluc3RhbnRpYXRlIHRoZSBDYXR3YWxrIGNsYXNzLlxuICAgICR3aW5kb3cuY2F0d2FsayA9IG5ldyBDYXR3YWxrKCk7XG5cbn0pKHdpbmRvdyk7IiwidmFyICRfX3BsYWNlaG9sZGVyX18wID0gJF9fcGxhY2Vob2xkZXJfXzEiLCIoJHRyYWNldXJSdW50aW1lLmNyZWF0ZUNsYXNzKSgkX19wbGFjZWhvbGRlcl9fMCwgJF9fcGxhY2Vob2xkZXJfXzEsICRfX3BsYWNlaG9sZGVyX18yKSIsIiR0cmFjZXVyUnVudGltZS5kZWZhdWx0U3VwZXJDYWxsKHRoaXMsXG4gICAgICAgICAgICAgICAgJF9fcGxhY2Vob2xkZXJfXzAucHJvdG90eXBlLCBhcmd1bWVudHMpIiwidmFyICRfX3BsYWNlaG9sZGVyX18wID0gJF9fcGxhY2Vob2xkZXJfXzEiLCIoJHRyYWNldXJSdW50aW1lLmNyZWF0ZUNsYXNzKSgkX19wbGFjZWhvbGRlcl9fMCwgJF9fcGxhY2Vob2xkZXJfXzEsICRfX3BsYWNlaG9sZGVyX18yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJF9fcGxhY2Vob2xkZXJfXzMpIiwiJHRyYWNldXJSdW50aW1lLnN1cGVyQ2FsbCgkX19wbGFjZWhvbGRlcl9fMCwgJF9fcGxhY2Vob2xkZXJfXzEsICRfX3BsYWNlaG9sZGVyX18yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkX19wbGFjZWhvbGRlcl9fMykiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
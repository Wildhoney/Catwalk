/*! catwalk.js by Adam Timberlake created on 2013-12-13 */
!function(a){"use strict";a.catwalk={}}(window),function(a){"use strict";var b=function(a){return String(a)},c=function(a){return Number(a)},d=function(a){return Number(a)},e=function(a){return Boolean(a)};a.catwalk.attribute={string:b,integer:c,"float":d,"boolean":e}}(window),function(a,b){"use strict";var c={},d=function(a,b){var c=function(a){a.resolve()};this._crossfilter={},this._dimensions={},this._deletedIds=[],this._resolvedIds=[],this._events={create:c,read:c,update:c,"delete":c,content:function(){}},this._name=a,this._properties=b;var d=this._crossfilter=crossfilter([]),e=this._dimensions,f=_.keys(b);_.forEach(f,function(a){"_"!==a.charAt(0)&&"$"!==a.charAt(0)&&(e[a]=d.dimension(function(b){return b[a]}))}),e.catwalkId=d.dimension(function(a){return a._catwalkId})};d.prototype={_name:"",_events:{},_resolvedIds:[],_properties:{},_crossfilter:{},_dimensions:{},_deletedIds:[],createModel:function(a,b){var c=this._properties,d=_.bind(this._createRelationship,this),e=this._properties._relationships||{},f=this._dimensions.catwalkId;return a._catwalkId=_.uniqueId("catwalk_"),_.forEach(a,function(b,f){if("_catwalkId"!==f&&"$"!==f.charAt(0)){if("function"==typeof e[f])return d(a,f,b),void 0;try{a[f]=c[f](b)}catch(g){throw"You forgot to define the `"+f+"` property on the collection blueprint."}}}),this._crossfilter.add([a]),this._finalise("create",f.top(1/0)[0],{},b)},_createReject:function(a){this.deleteModel(a,!1)},updateModel:function(a,b,c){if(!("_catwalkId"in a))throw"You are attempting to remove a non-Catwalk model.";this.deleteModel(a,!1);var d=_.extend(_.clone(a),b);return _.forEach(this._properties._relationships,function(c,e){delete d[e],d[e]=b[e]?b[e]:a._relationshipMeta[e]}),delete d._relationshipMeta,this._finalise("update",this.createModel(d),a,c)},_updateReject:function(a,b){this.deleteModel(a,!1),this._reanimateModel(b)},deleteModel:function(a,b){var c=this._deletedIds;if(!("_catwalkId"in a))throw"You are attempting to remove a non-Catwalk model.";return c.push(a._catwalkId),this._dimensions.catwalkId.filterFunction(function(a){return!_.contains(c,a)}),this._finalise("delete",a,{},b)},_deleteReject:function(a){this._reanimateModel(a)},_reanimateModel:function(a){var b=a._catwalkId,c=_.indexOf(this._deletedIds,b);this._deletedIds.splice(c,1),this._dimensions.catwalkId.filterFunction(_.bind(function(a){return!_.contains(this._deletedIds,a)},this))},_createRelationship:function(a,b,c){var d=this._properties._relationships||{};Object.defineProperty(a,b,{get:function(){return d[b](c)}}),"_relationshipMeta"in a||(a._relationshipMeta={}),a._relationshipMeta[b]=c},_finalise:function(a,c,d,e){e=!("undefined"!=typeof e&&!e);var f=b.defer(),g=_.bind(function(){this._events.content(this.all())},this),h=function(a){return"undefined"==typeof a?{}:(a=_.clone(a),_.forEach(a._relationshipMeta,function(b,c){a[c]=b}),delete a._catwalkId,delete a._relationshipMeta,a)},i=_.bind(function(b){var e="_"+a+b,f=this[e];"function"==typeof f&&f.apply(this,[c,d])},this);return e&&(this._events[a](f,h(c)),f.promise.then(function(){i("Resolve"),g()}),f.promise.fail(_.bind(function(){i("Reject"),g()},this))),g(),c},watch:function(a,b){this._events[a]=b},all:function(){return this._dimensions[this._properties._primaryKey].filterAll().top(1/0)},size:function(){return this._crossfilter.size()}},a.collection=function(a,b){return b?(c[a]=new d(a,b),c[a]):c[a]}}(window.catwalk,window.Q),function(a,b,c){"use strict";var d=function(a){return function(d){var e=b.collection(a.collection),f=e._dimensions[a.foreignKey],g=f.filterAll().filterFunction(function(a){return d===a}).top(1/0)[0];if(!g){if(-1!==_.indexOf(e._resolvedIds,d))return;var h=c.defer();e._events.read(h,d),e._resolvedIds.push(d),h.promise.then(function(a){e.createModel(a)})}return g}},e=function(a){return function(d){var e=b.collection(a.collection),f=e._dimensions[a.foreignKey],g=f.filterAll().filterFunction(function(a){return!!_.contains(d,a)}).top(1/0);if(d.length!==g.length){var h=c.defer(),i=_.difference(d,_.pluck(g,"id"));_.forEach(i,function(a){-1===_.indexOf(e._resolvedIds,a)&&(e._events.read(h,a),e._resolvedIds.push(a))}),h.promise.then(function(a){e.createModel(a)})}return g}};a.catwalk.relationship={hasOne:d,hasMany:e,belongsTo:function(){},hasAndBelongsToMany:function(){}}}(window,window.catwalk,window.Q);
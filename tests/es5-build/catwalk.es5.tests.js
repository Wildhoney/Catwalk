"use strict";
(function($window) {
  "use strict";
  var Catwalk = function Catwalk() {};
  ($traceurRuntime.createClass)(Catwalk, {createCollection: function(name, properties) {
      return new $window.Catwalk.Collection(name, properties);
    }}, {});
  $window.Catwalk = Catwalk;
})(window);

"use strict";
(function($Catwalk, $object) {
  "use strict";
  var CATWALK_PROPERTY = '__catwalkId';
  var CatwalkCollection = function CatwalkCollection(name, properties) {
    this.id = 0;
    this.name = name;
    this.properties = properties;
    this.models = [];
  };
  ($traceurRuntime.createClass)(CatwalkCollection, {
    getModels: $traceurRuntime.initGeneratorFunction(function $__3() {
      var $__1,
          $__2,
          model;
      return $traceurRuntime.createGeneratorInstance(function($ctx) {
        while (true)
          switch ($ctx.state) {
            case 0:
              $__1 = this.models[Symbol.iterator]();
              $ctx.state = 14;
              break;
            case 14:
              $ctx.state = (!($__2 = $__1.next()).done) ? 9 : -2;
              break;
            case 9:
              $ctx.pushTry(7, null);
              $ctx.state = 10;
              break;
            case 10:
              throw undefined;
              $ctx.state = 12;
              break;
            case 12:
              $ctx.popTry();
              $ctx.state = 14;
              break;
            case 7:
              $ctx.popTry();
              model = $ctx.storedException;
              $ctx.state = 5;
              break;
            case 5:
              model = $__2.value;
              $ctx.state = 6;
              break;
            case 6:
              $ctx.state = 2;
              return model;
            case 2:
              $ctx.maybeThrow();
              $ctx.state = 14;
              break;
            default:
              return $ctx.end();
          }
      }, $__3, this);
    }),
    addModel: function(properties) {
      var model = {};
      model[CATWALK_PROPERTY] = ++this.id;
      $object.keys(properties).forEach(function forEach(property) {
        model[property] = properties[property];
      });
      this.models.push($object.freeze(model));
      return model;
    },
    deleteModel: function(model) {
      var index = this.models.indexOf(model);
      this.models.splice(index, 1);
      return model;
    },
    clearModels: function() {
      this.models.length = 0;
    }
  }, {});
  $Catwalk.Collection = CatwalkCollection;
})(window.Catwalk, window.Object);

"use strict";

//# sourceMappingURL=data:application/json;base64,